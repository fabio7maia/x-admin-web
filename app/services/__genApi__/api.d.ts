/**
 * X Admin API
 * X Admin API Description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface XAdminAuthLoginExternalProviderServiceInput
 */
export interface XAdminAuthLoginExternalProviderServiceInput {
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginExternalProviderServiceInput
     */
    'app': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginExternalProviderServiceInput
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginExternalProviderServiceInput
     */
    'firstName': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginExternalProviderServiceInput
     */
    'lastName': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginExternalProviderServiceInput
     */
    'providerId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginExternalProviderServiceInput
     */
    'imageUrl': string;
}
/**
 *
 * @export
 * @interface XAdminAuthLoginExternalProviderServiceOutput
 */
export interface XAdminAuthLoginExternalProviderServiceOutput {
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginExternalProviderServiceOutput
     */
    'expiresIn': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginExternalProviderServiceOutput
     */
    'accessToken': string;
    /**
     *
     * @type {XAdminUser}
     * @memberof XAdminAuthLoginExternalProviderServiceOutput
     */
    'user': XAdminUser;
}
/**
 *
 * @export
 * @interface XAdminAuthLoginServiceInput
 */
export interface XAdminAuthLoginServiceInput {
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginServiceInput
     */
    'app': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginServiceInput
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginServiceInput
     */
    'password': string;
}
/**
 *
 * @export
 * @interface XAdminAuthLoginServiceOutput
 */
export interface XAdminAuthLoginServiceOutput {
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginServiceOutput
     */
    'expiresIn': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthLoginServiceOutput
     */
    'accessToken': string;
    /**
     *
     * @type {XAdminUser}
     * @memberof XAdminAuthLoginServiceOutput
     */
    'user': XAdminUser;
}
/**
 *
 * @export
 * @interface XAdminAuthMeServiceOutput
 */
export interface XAdminAuthMeServiceOutput {
    /**
     *
     * @type {string}
     * @memberof XAdminAuthMeServiceOutput
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminAuthMeServiceOutput
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthMeServiceOutput
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthMeServiceOutput
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthMeServiceOutput
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthMeServiceOutput
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthMeServiceOutput
     */
    'firstName': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthMeServiceOutput
     */
    'lastName': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthMeServiceOutput
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthMeServiceOutput
     */
    'password'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthMeServiceOutput
     */
    'imageUrl'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthMeServiceOutput
     */
    'providerId'?: string;
}
/**
 *
 * @export
 * @interface XAdminAuthRegisterServiceInput
 */
export interface XAdminAuthRegisterServiceInput {
    /**
     *
     * @type {string}
     * @memberof XAdminAuthRegisterServiceInput
     */
    'app': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthRegisterServiceInput
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthRegisterServiceInput
     */
    'firstName': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthRegisterServiceInput
     */
    'lastName': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthRegisterServiceInput
     */
    'password': string;
}
/**
 *
 * @export
 * @interface XAdminAuthRegisterServiceOutput
 */
export interface XAdminAuthRegisterServiceOutput {
    /**
     *
     * @type {string}
     * @memberof XAdminAuthRegisterServiceOutput
     */
    'expiresIn': string;
    /**
     *
     * @type {string}
     * @memberof XAdminAuthRegisterServiceOutput
     */
    'accessToken': string;
    /**
     *
     * @type {XAdminUser}
     * @memberof XAdminAuthRegisterServiceOutput
     */
    'user': XAdminUser;
}
/**
 *
 * @export
 * @interface XAdminCompany
 */
export interface XAdminCompany {
    /**
     *
     * @type {string}
     * @memberof XAdminCompany
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminCompany
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminCompany
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminCompany
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminCompany
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminCompany
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminCompany
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof XAdminCompany
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof XAdminCompany
     */
    'url': string;
}
/**
 *
 * @export
 * @interface XAdminConfiguration
 */
export interface XAdminConfiguration {
    /**
     *
     * @type {string}
     * @memberof XAdminConfiguration
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminConfiguration
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminConfiguration
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminConfiguration
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminConfiguration
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminConfiguration
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminConfiguration
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof XAdminConfiguration
     */
    'value': string;
}
/**
 *
 * @export
 * @interface XAdminEntitiesGetModelDataServiceOutput
 */
export interface XAdminEntitiesGetModelDataServiceOutput {
    /**
     *
     * @type {string}
     * @memberof XAdminEntitiesGetModelDataServiceOutput
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminEntitiesGetModelDataServiceOutput
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminEntitiesGetModelDataServiceOutput
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntitiesGetModelDataServiceOutput
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntitiesGetModelDataServiceOutput
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntitiesGetModelDataServiceOutput
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntitiesGetModelDataServiceOutput
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntitiesGetModelDataServiceOutput
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntitiesGetModelDataServiceOutput
     */
    'permissionId': string;
    /**
     *
     * @type {Array<string>}
     * @memberof XAdminEntitiesGetModelDataServiceOutput
     */
    'fields': Array<string>;
}
/**
 *
 * @export
 * @interface XAdminEntity
 */
export interface XAdminEntity {
    /**
     *
     * @type {string}
     * @memberof XAdminEntity
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminEntity
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminEntity
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntity
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntity
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntity
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntity
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntity
     */
    'permissionId': string;
}
/**
 *
 * @export
 * @interface XAdminEntityRecord
 */
export interface XAdminEntityRecord {
    /**
     *
     * @type {string}
     * @memberof XAdminEntityRecord
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminEntityRecord
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminEntityRecord
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntityRecord
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntityRecord
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntityRecord
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntityRecord
     */
    'entityId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminEntityRecord
     */
    'data': string;
}
/**
 *
 * @export
 * @interface XAdminField
 */
export interface XAdminField {
    /**
     *
     * @type {string}
     * @memberof XAdminField
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminField
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminField
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminField
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminField
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminField
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminField
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof XAdminField
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof XAdminField
     */
    'entityId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminField
     */
    'typeId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminField
     */
    'permissionId': string;
}
/**
 *
 * @export
 * @interface XAdminFunctionality
 */
export interface XAdminFunctionality {
    /**
     *
     * @type {string}
     * @memberof XAdminFunctionality
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminFunctionality
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminFunctionality
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminFunctionality
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminFunctionality
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminFunctionality
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminFunctionality
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof XAdminFunctionality
     */
    'description': string;
}
/**
 *
 * @export
 * @interface XAdminInlineResponse200
 */
export interface XAdminInlineResponse200 {
    /**
     *
     * @type {string}
     * @memberof XAdminInlineResponse200
     */
    'status'?: string;
    /**
     *
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof XAdminInlineResponse200
     */
    'info'?: {
        [key: string]: {
            [key: string]: string;
        };
    } | null;
    /**
     *
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof XAdminInlineResponse200
     */
    'error'?: {
        [key: string]: {
            [key: string]: string;
        };
    } | null;
    /**
     *
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof XAdminInlineResponse200
     */
    'details'?: {
        [key: string]: {
            [key: string]: string;
        };
    };
}
/**
 *
 * @export
 * @interface XAdminInlineResponse503
 */
export interface XAdminInlineResponse503 {
    /**
     *
     * @type {string}
     * @memberof XAdminInlineResponse503
     */
    'status'?: string;
    /**
     *
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof XAdminInlineResponse503
     */
    'info'?: {
        [key: string]: {
            [key: string]: string;
        };
    } | null;
    /**
     *
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof XAdminInlineResponse503
     */
    'error'?: {
        [key: string]: {
            [key: string]: string;
        };
    } | null;
    /**
     *
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof XAdminInlineResponse503
     */
    'details'?: {
        [key: string]: {
            [key: string]: string;
        };
    };
}
/**
 *
 * @export
 * @interface XAdminMenu
 */
export interface XAdminMenu {
    /**
     *
     * @type {string}
     * @memberof XAdminMenu
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminMenu
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminMenu
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminMenu
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminMenu
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminMenu
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminMenu
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof XAdminMenu
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof XAdminMenu
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof XAdminMenu
     */
    'icon': string;
    /**
     *
     * @type {string}
     * @memberof XAdminMenu
     */
    'routeUrl': string;
    /**
     *
     * @type {string}
     * @memberof XAdminMenu
     */
    'parentMenuId': string;
    /**
     *
     * @type {number}
     * @memberof XAdminMenu
     */
    'weight': number;
}
/**
 *
 * @export
 * @interface XAdminMode
 */
export interface XAdminMode {
    /**
     *
     * @type {string}
     * @memberof XAdminMode
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminMode
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminMode
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminMode
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminMode
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminMode
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminMode
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof XAdminMode
     */
    'description': string;
}
/**
 *
 * @export
 * @interface XAdminNewEntity
 */
export interface XAdminNewEntity {
    /**
     *
     * @type {string}
     * @memberof XAdminNewEntity
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminNewEntity
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminNewEntity
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminNewEntity
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminNewEntity
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminNewEntity
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminNewEntity
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof XAdminNewEntity
     */
    'image': string;
    /**
     *
     * @type {string}
     * @memberof XAdminNewEntity
     */
    'text': string;
}
/**
 *
 * @export
 * @interface XAdminPermission
 */
export interface XAdminPermission {
    /**
     *
     * @type {string}
     * @memberof XAdminPermission
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminPermission
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminPermission
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminPermission
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminPermission
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminPermission
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminPermission
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof XAdminPermission
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof XAdminPermission
     */
    'description': string;
    /**
     *
     * @type {number}
     * @memberof XAdminPermission
     */
    'weight': number;
}
/**
 *
 * @export
 * @interface XAdminQuiz
 */
export interface XAdminQuiz {
    /**
     *
     * @type {string}
     * @memberof XAdminQuiz
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminQuiz
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminQuiz
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuiz
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuiz
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuiz
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuiz
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuiz
     */
    'description': string;
}
/**
 *
 * @export
 * @interface XAdminQuizEngineBaseQuestionAnswerOutput
 */
export interface XAdminQuizEngineBaseQuestionAnswerOutput {
    /**
     *
     * @type {string}
     * @memberof XAdminQuizEngineBaseQuestionAnswerOutput
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizEngineBaseQuestionAnswerOutput
     */
    'answer': string;
}
/**
 *
 * @export
 * @interface XAdminQuizEngineBaseQuestionsOutput
 */
export interface XAdminQuizEngineBaseQuestionsOutput {
    /**
     *
     * @type {string}
     * @memberof XAdminQuizEngineBaseQuestionsOutput
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizEngineBaseQuestionsOutput
     */
    'question': string;
    /**
     *
     * @type {Array<XAdminQuizEngineBaseQuestionAnswerOutput>}
     * @memberof XAdminQuizEngineBaseQuestionsOutput
     */
    'answers': Array<XAdminQuizEngineBaseQuestionAnswerOutput>;
}
/**
 *
 * @export
 * @interface XAdminQuizEngineDoAnswerInput
 */
export interface XAdminQuizEngineDoAnswerInput {
    /**
     *
     * @type {string}
     * @memberof XAdminQuizEngineDoAnswerInput
     */
    'quizCode': string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizEngineDoAnswerInput
     */
    'userGameGuid': string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizEngineDoAnswerInput
     */
    'questionId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizEngineDoAnswerInput
     */
    'answerId': string;
}
/**
 *
 * @export
 * @interface XAdminQuizEngineDoAnswerOutput
 */
export interface XAdminQuizEngineDoAnswerOutput {
    /**
     *
     * @type {XAdminQuizEngineBaseQuestionsOutput}
     * @memberof XAdminQuizEngineDoAnswerOutput
     */
    'question': XAdminQuizEngineBaseQuestionsOutput;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizEngineDoAnswerOutput
     */
    'userGameGuid': string;
    /**
     *
     * @type {XAdminQuizEngineGameUserData}
     * @memberof XAdminQuizEngineDoAnswerOutput
     */
    'gameData': XAdminQuizEngineGameUserData;
    /**
     *
     * @type {boolean}
     * @memberof XAdminQuizEngineDoAnswerOutput
     */
    'isCorrectAnswer': boolean;
}
/**
 *
 * @export
 * @interface XAdminQuizEngineGameUserData
 */
export interface XAdminQuizEngineGameUserData {
    /**
     *
     * @type {number}
     * @memberof XAdminQuizEngineGameUserData
     */
    'points': number;
    /**
     *
     * @type {number}
     * @memberof XAdminQuizEngineGameUserData
     */
    'answers': number;
    /**
     *
     * @type {number}
     * @memberof XAdminQuizEngineGameUserData
     */
    'correctAnswers': number;
}
/**
 *
 * @export
 * @interface XAdminQuizEngineGetQuizGameDataOutput
 */
export interface XAdminQuizEngineGetQuizGameDataOutput {
    /**
     *
     * @type {XAdminQuizEngineBaseQuestionsOutput}
     * @memberof XAdminQuizEngineGetQuizGameDataOutput
     */
    'question': XAdminQuizEngineBaseQuestionsOutput;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizEngineGetQuizGameDataOutput
     */
    'userGameGuid': string;
    /**
     *
     * @type {XAdminQuizEngineGameUserData}
     * @memberof XAdminQuizEngineGetQuizGameDataOutput
     */
    'gameData': XAdminQuizEngineGameUserData;
}
/**
 *
 * @export
 * @interface XAdminQuizQuestion
 */
export interface XAdminQuizQuestion {
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestion
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminQuizQuestion
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestion
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestion
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestion
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestion
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestion
     */
    'quizId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestion
     */
    'question': string;
}
/**
 *
 * @export
 * @interface XAdminQuizQuestionAnswer
 */
export interface XAdminQuizQuestionAnswer {
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestionAnswer
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminQuizQuestionAnswer
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestionAnswer
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestionAnswer
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestionAnswer
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestionAnswer
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestionAnswer
     */
    'quizQuestionId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizQuestionAnswer
     */
    'answer': string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminQuizQuestionAnswer
     */
    'correctAnswer': boolean;
}
/**
 *
 * @export
 * @interface XAdminQuizUserData
 */
export interface XAdminQuizUserData {
    /**
     *
     * @type {string}
     * @memberof XAdminQuizUserData
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminQuizUserData
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizUserData
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizUserData
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizUserData
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizUserData
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminQuizUserData
     */
    'userId': string;
    /**
     *
     * @type {number}
     * @memberof XAdminQuizUserData
     */
    'points': number;
    /**
     *
     * @type {number}
     * @memberof XAdminQuizUserData
     */
    'answers': number;
    /**
     *
     * @type {number}
     * @memberof XAdminQuizUserData
     */
    'correctAnswers': number;
}
/**
 *
 * @export
 * @interface XAdminStoreCategory
 */
export interface XAdminStoreCategory {
    /**
     *
     * @type {string}
     * @memberof XAdminStoreCategory
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminStoreCategory
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreCategory
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreCategory
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreCategory
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreCategory
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreCategory
     */
    'companyId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreCategory
     */
    'parentCategoryId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreCategory
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreCategory
     */
    'description': string;
}
/**
 *
 * @export
 * @interface XAdminStoreClient
 */
export interface XAdminStoreClient {
    /**
     *
     * @type {string}
     * @memberof XAdminStoreClient
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminStoreClient
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreClient
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreClient
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreClient
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreClient
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreClient
     */
    'companyId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreClient
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreClient
     */
    'fullName': string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreClient
     */
    'address': string;
    /**
     *
     * @type {number}
     * @memberof XAdminStoreClient
     */
    'taxPayerNumber': number;
}
/**
 *
 * @export
 * @interface XAdminStoreOrderProduct
 */
export interface XAdminStoreOrderProduct {
    /**
     *
     * @type {string}
     * @memberof XAdminStoreOrderProduct
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminStoreOrderProduct
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreOrderProduct
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreOrderProduct
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreOrderProduct
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreOrderProduct
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreOrderProduct
     */
    'storeOrderId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreOrderProduct
     */
    'storeProductId': string;
    /**
     *
     * @type {number}
     * @memberof XAdminStoreOrderProduct
     */
    'quantity': number;
    /**
     *
     * @type {number}
     * @memberof XAdminStoreOrderProduct
     */
    'price': number;
    /**
     *
     * @type {number}
     * @memberof XAdminStoreOrderProduct
     */
    'discount': number;
}
/**
 *
 * @export
 * @interface XAdminStoreProduct
 */
export interface XAdminStoreProduct {
    /**
     *
     * @type {string}
     * @memberof XAdminStoreProduct
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminStoreProduct
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreProduct
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreProduct
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreProduct
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreProduct
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreProduct
     */
    'companyId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreProduct
     */
    'categoryId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreProduct
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreProduct
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof XAdminStoreProduct
     */
    'image': string;
    /**
     *
     * @type {object}
     * @memberof XAdminStoreProduct
     */
    'imageFileUpload': object;
    /**
     *
     * @type {number}
     * @memberof XAdminStoreProduct
     */
    'price': number;
    /**
     *
     * @type {number}
     * @memberof XAdminStoreProduct
     */
    'stock': number;
}
/**
 *
 * @export
 * @interface XAdminStorePurchaseInput
 */
export interface XAdminStorePurchaseInput {
    /**
     *
     * @type {Array<string>}
     * @memberof XAdminStorePurchaseInput
     */
    'products': Array<string>;
    /**
     *
     * @type {string}
     * @memberof XAdminStorePurchaseInput
     */
    'address': string;
}
/**
 *
 * @export
 * @interface XAdminStorePurchaseOutput
 */
export interface XAdminStorePurchaseOutput {
    /**
     *
     * @type {Array<string>}
     * @memberof XAdminStorePurchaseOutput
     */
    'products': Array<string>;
    /**
     *
     * @type {string}
     * @memberof XAdminStorePurchaseOutput
     */
    'address': string;
}
/**
 *
 * @export
 * @interface XAdminTranslation
 */
export interface XAdminTranslation {
    /**
     *
     * @type {string}
     * @memberof XAdminTranslation
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminTranslation
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminTranslation
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminTranslation
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminTranslation
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminTranslation
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminTranslation
     */
    'module': string;
    /**
     *
     * @type {string}
     * @memberof XAdminTranslation
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof XAdminTranslation
     */
    'value': string;
    /**
     *
     * @type {string}
     * @memberof XAdminTranslation
     */
    'language': string;
}
/**
 *
 * @export
 * @interface XAdminType
 */
export interface XAdminType {
    /**
     *
     * @type {string}
     * @memberof XAdminType
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminType
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminType
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminType
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminType
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminType
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminType
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof XAdminType
     */
    'description': string;
}
/**
 *
 * @export
 * @interface XAdminUser
 */
export interface XAdminUser {
    /**
     *
     * @type {string}
     * @memberof XAdminUser
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminUser
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminUser
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUser
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUser
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUser
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUser
     */
    'firstName': string;
    /**
     *
     * @type {string}
     * @memberof XAdminUser
     */
    'lastName': string;
    /**
     *
     * @type {string}
     * @memberof XAdminUser
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof XAdminUser
     */
    'password'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUser
     */
    'imageUrl'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUser
     */
    'providerId'?: string;
}
/**
 *
 * @export
 * @interface XAdminUserCompany
 */
export interface XAdminUserCompany {
    /**
     *
     * @type {string}
     * @memberof XAdminUserCompany
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminUserCompany
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminUserCompany
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUserCompany
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUserCompany
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUserCompany
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUserCompany
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminUserCompany
     */
    'companyId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminUserCompany
     */
    'permissionId': string;
}
/**
 *
 * @export
 * @interface XAdminUserPermission
 */
export interface XAdminUserPermission {
    /**
     *
     * @type {string}
     * @memberof XAdminUserPermission
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof XAdminUserPermission
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof XAdminUserPermission
     */
    'createdBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUserPermission
     */
    'createdOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUserPermission
     */
    'modifiedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUserPermission
     */
    'modifiedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof XAdminUserPermission
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof XAdminUserPermission
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof XAdminUserPermission
     */
    'permissionId': string;
}
/**
 * AppApi - axios parameter creator
 * @export
 */
export declare const AppApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerHealthCheck: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerVersion: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AppApi - functional programming interface
 * @export
 */
export declare const AppApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerHealthCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminInlineResponse200>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerVersion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AppApi - factory interface
 * @export
 */
export declare const AppApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerHealthCheck(options?: any): AxiosPromise<XAdminInlineResponse200>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerVersion(options?: any): AxiosPromise<void>;
};
/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export declare class AppApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    appControllerHealthCheck(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminInlineResponse200>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    appControllerVersion(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Login existing user
     * @param {XAdminAuthLoginServiceInput} xAdminAuthLoginServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: (xAdminAuthLoginServiceInput: XAdminAuthLoginServiceInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Login or register existing user from external provider
     * @param {XAdminAuthLoginExternalProviderServiceInput} xAdminAuthLoginExternalProviderServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginFromExternalProvider: (xAdminAuthLoginExternalProviderServiceInput: XAdminAuthLoginExternalProviderServiceInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get information about logged user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    me: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Register new user
     * @param {XAdminAuthRegisterServiceInput} xAdminAuthRegisterServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: (xAdminAuthRegisterServiceInput: XAdminAuthRegisterServiceInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Login existing user
     * @param {XAdminAuthLoginServiceInput} xAdminAuthLoginServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(xAdminAuthLoginServiceInput: XAdminAuthLoginServiceInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminAuthLoginServiceOutput>>;
    /**
     *
     * @summary Login or register existing user from external provider
     * @param {XAdminAuthLoginExternalProviderServiceInput} xAdminAuthLoginExternalProviderServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginFromExternalProvider(xAdminAuthLoginExternalProviderServiceInput: XAdminAuthLoginExternalProviderServiceInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminAuthLoginExternalProviderServiceOutput>>;
    /**
     *
     * @summary Get information about logged user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    me(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminAuthMeServiceOutput>>;
    /**
     *
     * @summary Register new user
     * @param {XAdminAuthRegisterServiceInput} xAdminAuthRegisterServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(xAdminAuthRegisterServiceInput: XAdminAuthRegisterServiceInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminAuthRegisterServiceOutput>>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Login existing user
     * @param {XAdminAuthLoginServiceInput} xAdminAuthLoginServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(xAdminAuthLoginServiceInput: XAdminAuthLoginServiceInput, options?: any): AxiosPromise<XAdminAuthLoginServiceOutput>;
    /**
     *
     * @summary Login or register existing user from external provider
     * @param {XAdminAuthLoginExternalProviderServiceInput} xAdminAuthLoginExternalProviderServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginFromExternalProvider(xAdminAuthLoginExternalProviderServiceInput: XAdminAuthLoginExternalProviderServiceInput, options?: any): AxiosPromise<XAdminAuthLoginExternalProviderServiceOutput>;
    /**
     *
     * @summary Get information about logged user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    me(options?: any): AxiosPromise<XAdminAuthMeServiceOutput>;
    /**
     *
     * @summary Register new user
     * @param {XAdminAuthRegisterServiceInput} xAdminAuthRegisterServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(xAdminAuthRegisterServiceInput: XAdminAuthRegisterServiceInput, options?: any): AxiosPromise<XAdminAuthRegisterServiceOutput>;
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI {
    /**
     *
     * @summary Login existing user
     * @param {XAdminAuthLoginServiceInput} xAdminAuthLoginServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    login(xAdminAuthLoginServiceInput: XAdminAuthLoginServiceInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminAuthLoginServiceOutput>>;
    /**
     *
     * @summary Login or register existing user from external provider
     * @param {XAdminAuthLoginExternalProviderServiceInput} xAdminAuthLoginExternalProviderServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    loginFromExternalProvider(xAdminAuthLoginExternalProviderServiceInput: XAdminAuthLoginExternalProviderServiceInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminAuthLoginExternalProviderServiceOutput>>;
    /**
     *
     * @summary Get information about logged user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    me(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminAuthMeServiceOutput>>;
    /**
     *
     * @summary Register new user
     * @param {XAdminAuthRegisterServiceInput} xAdminAuthRegisterServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    register(xAdminAuthRegisterServiceInput: XAdminAuthRegisterServiceInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminAuthRegisterServiceOutput>>;
}
/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export declare const CompaniesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add new company
     * @param {XAdminCompany} xAdminCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCompany: (xAdminCompany: XAdminCompany, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete existing company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCompany: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit existing company
     * @param {string} id
     * @param {XAdminCompany} xAdminCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editCompany: (id: string, xAdminCompany: XAdminCompany, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompany: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCompanies: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of companies by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCompaniesByUser: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CompaniesApi - functional programming interface
 * @export
 */
export declare const CompaniesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add new company
     * @param {XAdminCompany} xAdminCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCompany(xAdminCompany: XAdminCompany, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminCompany>>;
    /**
     *
     * @summary Delete existing company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCompany(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit existing company
     * @param {string} id
     * @param {XAdminCompany} xAdminCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editCompany(id: string, xAdminCompany: XAdminCompany, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminCompany>>;
    /**
     *
     * @summary Get specific company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompany(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminCompany>>;
    /**
     *
     * @summary List of companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCompanies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminCompany>>>;
    /**
     *
     * @summary List of companies by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCompaniesByUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminCompany>>>;
};
/**
 * CompaniesApi - factory interface
 * @export
 */
export declare const CompaniesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add new company
     * @param {XAdminCompany} xAdminCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCompany(xAdminCompany: XAdminCompany, options?: any): AxiosPromise<XAdminCompany>;
    /**
     *
     * @summary Delete existing company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCompany(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit existing company
     * @param {string} id
     * @param {XAdminCompany} xAdminCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editCompany(id: string, xAdminCompany: XAdminCompany, options?: any): AxiosPromise<XAdminCompany>;
    /**
     *
     * @summary Get specific company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompany(id: string, options?: any): AxiosPromise<XAdminCompany>;
    /**
     *
     * @summary List of companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCompanies(options?: any): AxiosPromise<Array<XAdminCompany>>;
    /**
     *
     * @summary List of companies by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCompaniesByUser(options?: any): AxiosPromise<Array<XAdminCompany>>;
};
/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export declare class CompaniesApi extends BaseAPI {
    /**
     *
     * @summary Add new company
     * @param {XAdminCompany} xAdminCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    addCompany(xAdminCompany: XAdminCompany, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminCompany>>;
    /**
     *
     * @summary Delete existing company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    deleteCompany(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit existing company
     * @param {string} id
     * @param {XAdminCompany} xAdminCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    editCompany(id: string, xAdminCompany: XAdminCompany, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminCompany>>;
    /**
     *
     * @summary Get specific company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    getCompany(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminCompany>>;
    /**
     *
     * @summary List of companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    listCompanies(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminCompany[]>>;
    /**
     *
     * @summary List of companies by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    listCompaniesByUser(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminCompany[]>>;
}
/**
 * ConfigurationsApi - axios parameter creator
 * @export
 */
export declare const ConfigurationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add new configuration
     * @param {XAdminConfiguration} xAdminConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addConfiguration: (xAdminConfiguration: XAdminConfiguration, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete existing configuration
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConfiguration: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit existing configuration
     * @param {string} id
     * @param {XAdminConfiguration} xAdminConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editConfiguration: (id: string, xAdminConfiguration: XAdminConfiguration, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific configuration
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfiguration: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConfigurations: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConfigurationsApi - functional programming interface
 * @export
 */
export declare const ConfigurationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add new configuration
     * @param {XAdminConfiguration} xAdminConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addConfiguration(xAdminConfiguration: XAdminConfiguration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminConfiguration>>;
    /**
     *
     * @summary Delete existing configuration
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConfiguration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit existing configuration
     * @param {string} id
     * @param {XAdminConfiguration} xAdminConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editConfiguration(id: string, xAdminConfiguration: XAdminConfiguration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminConfiguration>>;
    /**
     *
     * @summary Get specific configuration
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfiguration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminConfiguration>>;
    /**
     *
     * @summary List of configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConfigurations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminConfiguration>>>;
};
/**
 * ConfigurationsApi - factory interface
 * @export
 */
export declare const ConfigurationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add new configuration
     * @param {XAdminConfiguration} xAdminConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addConfiguration(xAdminConfiguration: XAdminConfiguration, options?: any): AxiosPromise<XAdminConfiguration>;
    /**
     *
     * @summary Delete existing configuration
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConfiguration(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit existing configuration
     * @param {string} id
     * @param {XAdminConfiguration} xAdminConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editConfiguration(id: string, xAdminConfiguration: XAdminConfiguration, options?: any): AxiosPromise<XAdminConfiguration>;
    /**
     *
     * @summary Get specific configuration
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfiguration(id: string, options?: any): AxiosPromise<XAdminConfiguration>;
    /**
     *
     * @summary List of configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConfigurations(options?: any): AxiosPromise<Array<XAdminConfiguration>>;
};
/**
 * ConfigurationsApi - object-oriented interface
 * @export
 * @class ConfigurationsApi
 * @extends {BaseAPI}
 */
export declare class ConfigurationsApi extends BaseAPI {
    /**
     *
     * @summary Add new configuration
     * @param {XAdminConfiguration} xAdminConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    addConfiguration(xAdminConfiguration: XAdminConfiguration, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminConfiguration>>;
    /**
     *
     * @summary Delete existing configuration
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    deleteConfiguration(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit existing configuration
     * @param {string} id
     * @param {XAdminConfiguration} xAdminConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    editConfiguration(id: string, xAdminConfiguration: XAdminConfiguration, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminConfiguration>>;
    /**
     *
     * @summary Get specific configuration
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    getConfiguration(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminConfiguration>>;
    /**
     *
     * @summary List of configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    listConfigurations(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminConfiguration[]>>;
}
/**
 * EngineQuizGameApi - axios parameter creator
 * @export
 */
export declare const EngineQuizGameApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Answer specific question of quiz game
     * @param {XAdminQuizEngineDoAnswerInput} xAdminQuizEngineDoAnswerInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    doAnswer: (xAdminQuizEngineDoAnswerInput: XAdminQuizEngineDoAnswerInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of quiz game
     * @param {string} quizCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizGame: (quizCode: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EngineQuizGameApi - functional programming interface
 * @export
 */
export declare const EngineQuizGameApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Answer specific question of quiz game
     * @param {XAdminQuizEngineDoAnswerInput} xAdminQuizEngineDoAnswerInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    doAnswer(xAdminQuizEngineDoAnswerInput: XAdminQuizEngineDoAnswerInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuizEngineDoAnswerOutput>>;
    /**
     *
     * @summary List of quiz game
     * @param {string} quizCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizGame(quizCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuizEngineGetQuizGameDataOutput>>;
};
/**
 * EngineQuizGameApi - factory interface
 * @export
 */
export declare const EngineQuizGameApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Answer specific question of quiz game
     * @param {XAdminQuizEngineDoAnswerInput} xAdminQuizEngineDoAnswerInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    doAnswer(xAdminQuizEngineDoAnswerInput: XAdminQuizEngineDoAnswerInput, options?: any): AxiosPromise<XAdminQuizEngineDoAnswerOutput>;
    /**
     *
     * @summary List of quiz game
     * @param {string} quizCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizGame(quizCode: string, options?: any): AxiosPromise<XAdminQuizEngineGetQuizGameDataOutput>;
};
/**
 * EngineQuizGameApi - object-oriented interface
 * @export
 * @class EngineQuizGameApi
 * @extends {BaseAPI}
 */
export declare class EngineQuizGameApi extends BaseAPI {
    /**
     *
     * @summary Answer specific question of quiz game
     * @param {XAdminQuizEngineDoAnswerInput} xAdminQuizEngineDoAnswerInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineQuizGameApi
     */
    doAnswer(xAdminQuizEngineDoAnswerInput: XAdminQuizEngineDoAnswerInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizEngineDoAnswerOutput>>;
    /**
     *
     * @summary List of quiz game
     * @param {string} quizCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineQuizGameApi
     */
    listQuizGame(quizCode: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizEngineGetQuizGameDataOutput>>;
}
/**
 * EntitiesApi - axios parameter creator
 * @export
 */
export declare const EntitiesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add new entity
     * @param {XAdminEntity} xAdminEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEntity: (xAdminEntity: XAdminEntity, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete existing entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntity: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit existing entity
     * @param {string} id
     * @param {XAdminEntity} xAdminEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editEntity: (id: string, xAdminEntity: XAdminEntity, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get model data for specific entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getModelDataEntity: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEntities: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EntitiesApi - functional programming interface
 * @export
 */
export declare const EntitiesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add new entity
     * @param {XAdminEntity} xAdminEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEntity(xAdminEntity: XAdminEntity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminEntity>>;
    /**
     *
     * @summary Delete existing entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntity(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit existing entity
     * @param {string} id
     * @param {XAdminEntity} xAdminEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editEntity(id: string, xAdminEntity: XAdminEntity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminEntity>>;
    /**
     *
     * @summary Get specific entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminEntity>>;
    /**
     *
     * @summary Get model data for specific entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getModelDataEntity(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminEntitiesGetModelDataServiceOutput>>;
    /**
     *
     * @summary List of entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEntities(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminEntity>>>;
};
/**
 * EntitiesApi - factory interface
 * @export
 */
export declare const EntitiesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add new entity
     * @param {XAdminEntity} xAdminEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEntity(xAdminEntity: XAdminEntity, options?: any): AxiosPromise<XAdminEntity>;
    /**
     *
     * @summary Delete existing entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntity(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit existing entity
     * @param {string} id
     * @param {XAdminEntity} xAdminEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editEntity(id: string, xAdminEntity: XAdminEntity, options?: any): AxiosPromise<XAdminEntity>;
    /**
     *
     * @summary Get specific entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity(id: string, options?: any): AxiosPromise<XAdminEntity>;
    /**
     *
     * @summary Get model data for specific entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getModelDataEntity(id: string, options?: any): AxiosPromise<XAdminEntitiesGetModelDataServiceOutput>;
    /**
     *
     * @summary List of entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEntities(options?: any): AxiosPromise<Array<XAdminEntity>>;
};
/**
 * EntitiesApi - object-oriented interface
 * @export
 * @class EntitiesApi
 * @extends {BaseAPI}
 */
export declare class EntitiesApi extends BaseAPI {
    /**
     *
     * @summary Add new entity
     * @param {XAdminEntity} xAdminEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    addEntity(xAdminEntity: XAdminEntity, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminEntity>>;
    /**
     *
     * @summary Delete existing entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntity(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit existing entity
     * @param {string} id
     * @param {XAdminEntity} xAdminEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    editEntity(id: string, xAdminEntity: XAdminEntity, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminEntity>>;
    /**
     *
     * @summary Get specific entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntity(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminEntity>>;
    /**
     *
     * @summary Get model data for specific entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getModelDataEntity(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminEntitiesGetModelDataServiceOutput>>;
    /**
     *
     * @summary List of entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    listEntities(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminEntity[]>>;
}
/**
 * EntitiesRecordsApi - axios parameter creator
 * @export
 */
export declare const EntitiesRecordsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add new entity record
     * @param {XAdminEntityRecord} xAdminEntityRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEntityRecord: (xAdminEntityRecord: XAdminEntityRecord, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete existing entity record
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityRecord: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit existing entity record
     * @param {string} id
     * @param {XAdminEntityRecord} xAdminEntityRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editEntityRecord: (id: string, xAdminEntityRecord: XAdminEntityRecord, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific entity record
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityRecord: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of entity records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEntityRecords: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EntitiesRecordsApi - functional programming interface
 * @export
 */
export declare const EntitiesRecordsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add new entity record
     * @param {XAdminEntityRecord} xAdminEntityRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEntityRecord(xAdminEntityRecord: XAdminEntityRecord, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminEntityRecord>>;
    /**
     *
     * @summary Delete existing entity record
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityRecord(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit existing entity record
     * @param {string} id
     * @param {XAdminEntityRecord} xAdminEntityRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editEntityRecord(id: string, xAdminEntityRecord: XAdminEntityRecord, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminEntityRecord>>;
    /**
     *
     * @summary Get specific entity record
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityRecord(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminEntityRecord>>;
    /**
     *
     * @summary List of entity records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEntityRecords(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminEntityRecord>>>;
};
/**
 * EntitiesRecordsApi - factory interface
 * @export
 */
export declare const EntitiesRecordsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add new entity record
     * @param {XAdminEntityRecord} xAdminEntityRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEntityRecord(xAdminEntityRecord: XAdminEntityRecord, options?: any): AxiosPromise<XAdminEntityRecord>;
    /**
     *
     * @summary Delete existing entity record
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityRecord(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit existing entity record
     * @param {string} id
     * @param {XAdminEntityRecord} xAdminEntityRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editEntityRecord(id: string, xAdminEntityRecord: XAdminEntityRecord, options?: any): AxiosPromise<XAdminEntityRecord>;
    /**
     *
     * @summary Get specific entity record
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityRecord(id: string, options?: any): AxiosPromise<XAdminEntityRecord>;
    /**
     *
     * @summary List of entity records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEntityRecords(options?: any): AxiosPromise<Array<XAdminEntityRecord>>;
};
/**
 * EntitiesRecordsApi - object-oriented interface
 * @export
 * @class EntitiesRecordsApi
 * @extends {BaseAPI}
 */
export declare class EntitiesRecordsApi extends BaseAPI {
    /**
     *
     * @summary Add new entity record
     * @param {XAdminEntityRecord} xAdminEntityRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesRecordsApi
     */
    addEntityRecord(xAdminEntityRecord: XAdminEntityRecord, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminEntityRecord>>;
    /**
     *
     * @summary Delete existing entity record
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesRecordsApi
     */
    deleteEntityRecord(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit existing entity record
     * @param {string} id
     * @param {XAdminEntityRecord} xAdminEntityRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesRecordsApi
     */
    editEntityRecord(id: string, xAdminEntityRecord: XAdminEntityRecord, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminEntityRecord>>;
    /**
     *
     * @summary Get specific entity record
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesRecordsApi
     */
    getEntityRecord(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminEntityRecord>>;
    /**
     *
     * @summary List of entity records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesRecordsApi
     */
    listEntityRecords(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminEntityRecord[]>>;
}
/**
 * FieldsApi - axios parameter creator
 * @export
 */
export declare const FieldsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add field
     * @param {XAdminField} xAdminField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addField: (xAdminField: XAdminField, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete field
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteField: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit field
     * @param {string} id
     * @param {XAdminField} xAdminField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editField: (id: string, xAdminField: XAdminField, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific field
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getField: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFields: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FieldsApi - functional programming interface
 * @export
 */
export declare const FieldsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add field
     * @param {XAdminField} xAdminField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addField(xAdminField: XAdminField, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminField>>;
    /**
     *
     * @summary Delete field
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteField(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit field
     * @param {string} id
     * @param {XAdminField} xAdminField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editField(id: string, xAdminField: XAdminField, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminField>>;
    /**
     *
     * @summary Get specific field
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getField(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminField>>;
    /**
     *
     * @summary List of fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFields(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminField>>>;
};
/**
 * FieldsApi - factory interface
 * @export
 */
export declare const FieldsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add field
     * @param {XAdminField} xAdminField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addField(xAdminField: XAdminField, options?: any): AxiosPromise<XAdminField>;
    /**
     *
     * @summary Delete field
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteField(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit field
     * @param {string} id
     * @param {XAdminField} xAdminField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editField(id: string, xAdminField: XAdminField, options?: any): AxiosPromise<XAdminField>;
    /**
     *
     * @summary Get specific field
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getField(id: string, options?: any): AxiosPromise<XAdminField>;
    /**
     *
     * @summary List of fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFields(options?: any): AxiosPromise<Array<XAdminField>>;
};
/**
 * FieldsApi - object-oriented interface
 * @export
 * @class FieldsApi
 * @extends {BaseAPI}
 */
export declare class FieldsApi extends BaseAPI {
    /**
     *
     * @summary Add field
     * @param {XAdminField} xAdminField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    addField(xAdminField: XAdminField, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminField>>;
    /**
     *
     * @summary Delete field
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    deleteField(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit field
     * @param {string} id
     * @param {XAdminField} xAdminField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    editField(id: string, xAdminField: XAdminField, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminField>>;
    /**
     *
     * @summary Get specific field
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    getField(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminField>>;
    /**
     *
     * @summary List of fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    listFields(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminField[]>>;
}
/**
 * FunctionalitiesApi - axios parameter creator
 * @export
 */
export declare const FunctionalitiesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add functionality
     * @param {XAdminFunctionality} xAdminFunctionality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFunctionality: (xAdminFunctionality: XAdminFunctionality, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete functionality
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFunctionality: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit functionality
     * @param {string} id
     * @param {XAdminFunctionality} xAdminFunctionality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editFunctionality: (id: string, xAdminFunctionality: XAdminFunctionality, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific functionality
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFunctionality: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of functionalities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFunctionalities: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FunctionalitiesApi - functional programming interface
 * @export
 */
export declare const FunctionalitiesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add functionality
     * @param {XAdminFunctionality} xAdminFunctionality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFunctionality(xAdminFunctionality: XAdminFunctionality, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminFunctionality>>;
    /**
     *
     * @summary Delete functionality
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFunctionality(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit functionality
     * @param {string} id
     * @param {XAdminFunctionality} xAdminFunctionality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editFunctionality(id: string, xAdminFunctionality: XAdminFunctionality, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminFunctionality>>;
    /**
     *
     * @summary Get specific functionality
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFunctionality(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminFunctionality>>;
    /**
     *
     * @summary List of functionalities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFunctionalities(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminFunctionality>>>;
};
/**
 * FunctionalitiesApi - factory interface
 * @export
 */
export declare const FunctionalitiesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add functionality
     * @param {XAdminFunctionality} xAdminFunctionality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFunctionality(xAdminFunctionality: XAdminFunctionality, options?: any): AxiosPromise<XAdminFunctionality>;
    /**
     *
     * @summary Delete functionality
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFunctionality(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit functionality
     * @param {string} id
     * @param {XAdminFunctionality} xAdminFunctionality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editFunctionality(id: string, xAdminFunctionality: XAdminFunctionality, options?: any): AxiosPromise<XAdminFunctionality>;
    /**
     *
     * @summary Get specific functionality
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFunctionality(id: string, options?: any): AxiosPromise<XAdminFunctionality>;
    /**
     *
     * @summary List of functionalities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFunctionalities(options?: any): AxiosPromise<Array<XAdminFunctionality>>;
};
/**
 * FunctionalitiesApi - object-oriented interface
 * @export
 * @class FunctionalitiesApi
 * @extends {BaseAPI}
 */
export declare class FunctionalitiesApi extends BaseAPI {
    /**
     *
     * @summary Add functionality
     * @param {XAdminFunctionality} xAdminFunctionality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionalitiesApi
     */
    addFunctionality(xAdminFunctionality: XAdminFunctionality, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminFunctionality>>;
    /**
     *
     * @summary Delete functionality
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionalitiesApi
     */
    deleteFunctionality(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit functionality
     * @param {string} id
     * @param {XAdminFunctionality} xAdminFunctionality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionalitiesApi
     */
    editFunctionality(id: string, xAdminFunctionality: XAdminFunctionality, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminFunctionality>>;
    /**
     *
     * @summary Get specific functionality
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionalitiesApi
     */
    getFunctionality(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminFunctionality>>;
    /**
     *
     * @summary List of functionalities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionalitiesApi
     */
    listFunctionalities(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminFunctionality[]>>;
}
/**
 * MenusApi - axios parameter creator
 * @export
 */
export declare const MenusApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add menu
     * @param {XAdminMenu} xAdminMenu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMenu: (xAdminMenu: XAdminMenu, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete menu
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMenu: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit menu
     * @param {string} id
     * @param {XAdminMenu} xAdminMenu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMenu: (id: string, xAdminMenu: XAdminMenu, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific menu
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMenu: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMenus: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MenusApi - functional programming interface
 * @export
 */
export declare const MenusApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add menu
     * @param {XAdminMenu} xAdminMenu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMenu(xAdminMenu: XAdminMenu, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminMenu>>;
    /**
     *
     * @summary Delete menu
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMenu(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit menu
     * @param {string} id
     * @param {XAdminMenu} xAdminMenu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMenu(id: string, xAdminMenu: XAdminMenu, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminMenu>>;
    /**
     *
     * @summary Get specific menu
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMenu(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminMenu>>;
    /**
     *
     * @summary List of menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMenus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminMenu>>>;
};
/**
 * MenusApi - factory interface
 * @export
 */
export declare const MenusApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add menu
     * @param {XAdminMenu} xAdminMenu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMenu(xAdminMenu: XAdminMenu, options?: any): AxiosPromise<XAdminMenu>;
    /**
     *
     * @summary Delete menu
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMenu(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit menu
     * @param {string} id
     * @param {XAdminMenu} xAdminMenu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMenu(id: string, xAdminMenu: XAdminMenu, options?: any): AxiosPromise<XAdminMenu>;
    /**
     *
     * @summary Get specific menu
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMenu(id: string, options?: any): AxiosPromise<XAdminMenu>;
    /**
     *
     * @summary List of menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMenus(options?: any): AxiosPromise<Array<XAdminMenu>>;
};
/**
 * MenusApi - object-oriented interface
 * @export
 * @class MenusApi
 * @extends {BaseAPI}
 */
export declare class MenusApi extends BaseAPI {
    /**
     *
     * @summary Add menu
     * @param {XAdminMenu} xAdminMenu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    addMenu(xAdminMenu: XAdminMenu, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminMenu>>;
    /**
     *
     * @summary Delete menu
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    deleteMenu(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit menu
     * @param {string} id
     * @param {XAdminMenu} xAdminMenu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    editMenu(id: string, xAdminMenu: XAdminMenu, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminMenu>>;
    /**
     *
     * @summary Get specific menu
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    getMenu(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminMenu>>;
    /**
     *
     * @summary List of menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    listMenus(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminMenu[]>>;
}
/**
 * ModesApi - axios parameter creator
 * @export
 */
export declare const ModesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add mode
     * @param {XAdminMode} xAdminMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMode: (xAdminMode: XAdminMode, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete mode
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMode: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit mode
     * @param {string} id
     * @param {XAdminMode} xAdminMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMode: (id: string, xAdminMode: XAdminMode, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific mode
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMode: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of modes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModes: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ModesApi - functional programming interface
 * @export
 */
export declare const ModesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add mode
     * @param {XAdminMode} xAdminMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMode(xAdminMode: XAdminMode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminMode>>;
    /**
     *
     * @summary Delete mode
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMode(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit mode
     * @param {string} id
     * @param {XAdminMode} xAdminMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMode(id: string, xAdminMode: XAdminMode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminMode>>;
    /**
     *
     * @summary Get specific mode
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMode(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminMode>>;
    /**
     *
     * @summary List of modes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminMode>>>;
};
/**
 * ModesApi - factory interface
 * @export
 */
export declare const ModesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add mode
     * @param {XAdminMode} xAdminMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMode(xAdminMode: XAdminMode, options?: any): AxiosPromise<XAdminMode>;
    /**
     *
     * @summary Delete mode
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMode(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit mode
     * @param {string} id
     * @param {XAdminMode} xAdminMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMode(id: string, xAdminMode: XAdminMode, options?: any): AxiosPromise<XAdminMode>;
    /**
     *
     * @summary Get specific mode
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMode(id: string, options?: any): AxiosPromise<XAdminMode>;
    /**
     *
     * @summary List of modes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModes(options?: any): AxiosPromise<Array<XAdminMode>>;
};
/**
 * ModesApi - object-oriented interface
 * @export
 * @class ModesApi
 * @extends {BaseAPI}
 */
export declare class ModesApi extends BaseAPI {
    /**
     *
     * @summary Add mode
     * @param {XAdminMode} xAdminMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModesApi
     */
    addMode(xAdminMode: XAdminMode, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminMode>>;
    /**
     *
     * @summary Delete mode
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModesApi
     */
    deleteMode(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit mode
     * @param {string} id
     * @param {XAdminMode} xAdminMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModesApi
     */
    editMode(id: string, xAdminMode: XAdminMode, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminMode>>;
    /**
     *
     * @summary Get specific mode
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModesApi
     */
    getMode(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminMode>>;
    /**
     *
     * @summary List of modes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModesApi
     */
    listModes(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminMode[]>>;
}
/**
 * NewsApi - axios parameter creator
 * @export
 */
export declare const NewsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add new
     * @param {XAdminNewEntity} xAdminNewEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNew: (xAdminNewEntity: XAdminNewEntity, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete new
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNew: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit new
     * @param {string} id
     * @param {XAdminNewEntity} xAdminNewEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editNew: (id: string, xAdminNewEntity: XAdminNewEntity, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific new
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNew: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of news
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listNews: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NewsApi - functional programming interface
 * @export
 */
export declare const NewsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add new
     * @param {XAdminNewEntity} xAdminNewEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNew(xAdminNewEntity: XAdminNewEntity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminNewEntity>>;
    /**
     *
     * @summary Delete new
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNew(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit new
     * @param {string} id
     * @param {XAdminNewEntity} xAdminNewEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editNew(id: string, xAdminNewEntity: XAdminNewEntity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminNewEntity>>;
    /**
     *
     * @summary Get specific new
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNew(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminNewEntity>>;
    /**
     *
     * @summary List of news
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listNews(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminNewEntity>>>;
};
/**
 * NewsApi - factory interface
 * @export
 */
export declare const NewsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add new
     * @param {XAdminNewEntity} xAdminNewEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNew(xAdminNewEntity: XAdminNewEntity, options?: any): AxiosPromise<XAdminNewEntity>;
    /**
     *
     * @summary Delete new
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNew(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit new
     * @param {string} id
     * @param {XAdminNewEntity} xAdminNewEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editNew(id: string, xAdminNewEntity: XAdminNewEntity, options?: any): AxiosPromise<XAdminNewEntity>;
    /**
     *
     * @summary Get specific new
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNew(id: string, options?: any): AxiosPromise<XAdminNewEntity>;
    /**
     *
     * @summary List of news
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listNews(options?: any): AxiosPromise<Array<XAdminNewEntity>>;
};
/**
 * NewsApi - object-oriented interface
 * @export
 * @class NewsApi
 * @extends {BaseAPI}
 */
export declare class NewsApi extends BaseAPI {
    /**
     *
     * @summary Add new
     * @param {XAdminNewEntity} xAdminNewEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    addNew(xAdminNewEntity: XAdminNewEntity, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminNewEntity>>;
    /**
     *
     * @summary Delete new
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    deleteNew(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit new
     * @param {string} id
     * @param {XAdminNewEntity} xAdminNewEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    editNew(id: string, xAdminNewEntity: XAdminNewEntity, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminNewEntity>>;
    /**
     *
     * @summary Get specific new
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    getNew(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminNewEntity>>;
    /**
     *
     * @summary List of news
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    listNews(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminNewEntity[]>>;
}
/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export declare const PermissionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add permission
     * @param {XAdminPermission} xAdminPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPermission: (xAdminPermission: XAdminPermission, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePermission: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit permission
     * @param {string} id
     * @param {XAdminPermission} xAdminPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editPermission: (id: string, xAdminPermission: XAdminPermission, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPermission: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPermissions: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of permissions by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPermissionsByUser: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PermissionsApi - functional programming interface
 * @export
 */
export declare const PermissionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add permission
     * @param {XAdminPermission} xAdminPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPermission(xAdminPermission: XAdminPermission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminPermission>>;
    /**
     *
     * @summary Delete permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePermission(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit permission
     * @param {string} id
     * @param {XAdminPermission} xAdminPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editPermission(id: string, xAdminPermission: XAdminPermission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminPermission>>;
    /**
     *
     * @summary Get specific permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPermission(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminPermission>>;
    /**
     *
     * @summary List of permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPermissions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminPermission>>>;
    /**
     *
     * @summary List of permissions by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPermissionsByUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminPermission>>>;
};
/**
 * PermissionsApi - factory interface
 * @export
 */
export declare const PermissionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add permission
     * @param {XAdminPermission} xAdminPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPermission(xAdminPermission: XAdminPermission, options?: any): AxiosPromise<XAdminPermission>;
    /**
     *
     * @summary Delete permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePermission(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit permission
     * @param {string} id
     * @param {XAdminPermission} xAdminPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editPermission(id: string, xAdminPermission: XAdminPermission, options?: any): AxiosPromise<XAdminPermission>;
    /**
     *
     * @summary Get specific permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPermission(id: string, options?: any): AxiosPromise<XAdminPermission>;
    /**
     *
     * @summary List of permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPermissions(options?: any): AxiosPromise<Array<XAdminPermission>>;
    /**
     *
     * @summary List of permissions by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPermissionsByUser(options?: any): AxiosPromise<Array<XAdminPermission>>;
};
/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export declare class PermissionsApi extends BaseAPI {
    /**
     *
     * @summary Add permission
     * @param {XAdminPermission} xAdminPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    addPermission(xAdminPermission: XAdminPermission, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminPermission>>;
    /**
     *
     * @summary Delete permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    deletePermission(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit permission
     * @param {string} id
     * @param {XAdminPermission} xAdminPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    editPermission(id: string, xAdminPermission: XAdminPermission, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminPermission>>;
    /**
     *
     * @summary Get specific permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    getPermission(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminPermission>>;
    /**
     *
     * @summary List of permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    listPermissions(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminPermission[]>>;
    /**
     *
     * @summary List of permissions by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    listPermissionsByUser(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminPermission[]>>;
}
/**
 * QuestionsAnswersQuizGameApi - axios parameter creator
 * @export
 */
export declare const QuestionsAnswersQuizGameApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add quiz question answers
     * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuizQuestionAnswer: (xAdminQuizQuestionAnswer: XAdminQuizQuestionAnswer, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete quiz question answers
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuizQuestionAnswer: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit quiz question answers
     * @param {string} id
     * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editQuizQuestionAnswer: (id: string, xAdminQuizQuestionAnswer: XAdminQuizQuestionAnswer, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific quiz question answers
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuizQuestionAnswer: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of quiz question answers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizQuestionAnswers: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * QuestionsAnswersQuizGameApi - functional programming interface
 * @export
 */
export declare const QuestionsAnswersQuizGameApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add quiz question answers
     * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuizQuestionAnswer(xAdminQuizQuestionAnswer: XAdminQuizQuestionAnswer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuizQuestionAnswer>>;
    /**
     *
     * @summary Delete quiz question answers
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuizQuestionAnswer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit quiz question answers
     * @param {string} id
     * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editQuizQuestionAnswer(id: string, xAdminQuizQuestionAnswer: XAdminQuizQuestionAnswer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuizQuestionAnswer>>;
    /**
     *
     * @summary Get specific quiz question answers
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuizQuestionAnswer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuizQuestionAnswer>>;
    /**
     *
     * @summary List of quiz question answers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizQuestionAnswers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminQuizQuestionAnswer>>>;
};
/**
 * QuestionsAnswersQuizGameApi - factory interface
 * @export
 */
export declare const QuestionsAnswersQuizGameApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add quiz question answers
     * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuizQuestionAnswer(xAdminQuizQuestionAnswer: XAdminQuizQuestionAnswer, options?: any): AxiosPromise<XAdminQuizQuestionAnswer>;
    /**
     *
     * @summary Delete quiz question answers
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuizQuestionAnswer(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit quiz question answers
     * @param {string} id
     * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editQuizQuestionAnswer(id: string, xAdminQuizQuestionAnswer: XAdminQuizQuestionAnswer, options?: any): AxiosPromise<XAdminQuizQuestionAnswer>;
    /**
     *
     * @summary Get specific quiz question answers
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuizQuestionAnswer(id: string, options?: any): AxiosPromise<XAdminQuizQuestionAnswer>;
    /**
     *
     * @summary List of quiz question answers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizQuestionAnswers(options?: any): AxiosPromise<Array<XAdminQuizQuestionAnswer>>;
};
/**
 * QuestionsAnswersQuizGameApi - object-oriented interface
 * @export
 * @class QuestionsAnswersQuizGameApi
 * @extends {BaseAPI}
 */
export declare class QuestionsAnswersQuizGameApi extends BaseAPI {
    /**
     *
     * @summary Add quiz question answers
     * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsAnswersQuizGameApi
     */
    addQuizQuestionAnswer(xAdminQuizQuestionAnswer: XAdminQuizQuestionAnswer, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizQuestionAnswer>>;
    /**
     *
     * @summary Delete quiz question answers
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsAnswersQuizGameApi
     */
    deleteQuizQuestionAnswer(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit quiz question answers
     * @param {string} id
     * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsAnswersQuizGameApi
     */
    editQuizQuestionAnswer(id: string, xAdminQuizQuestionAnswer: XAdminQuizQuestionAnswer, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizQuestionAnswer>>;
    /**
     *
     * @summary Get specific quiz question answers
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsAnswersQuizGameApi
     */
    getQuizQuestionAnswer(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizQuestionAnswer>>;
    /**
     *
     * @summary List of quiz question answers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsAnswersQuizGameApi
     */
    listQuizQuestionAnswers(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizQuestionAnswer[]>>;
}
/**
 * QuestionsQuizGameApi - axios parameter creator
 * @export
 */
export declare const QuestionsQuizGameApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add quiz question
     * @param {XAdminQuizQuestion} xAdminQuizQuestion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuizQuestion: (xAdminQuizQuestion: XAdminQuizQuestion, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete quiz question
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuizQuestion: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit quiz question
     * @param {string} id
     * @param {XAdminQuizQuestion} xAdminQuizQuestion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editQuizQuestion: (id: string, xAdminQuizQuestion: XAdminQuizQuestion, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific quiz question
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuizQuestion: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of quiz questions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizQuestions: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * QuestionsQuizGameApi - functional programming interface
 * @export
 */
export declare const QuestionsQuizGameApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add quiz question
     * @param {XAdminQuizQuestion} xAdminQuizQuestion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuizQuestion(xAdminQuizQuestion: XAdminQuizQuestion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuizQuestion>>;
    /**
     *
     * @summary Delete quiz question
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuizQuestion(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit quiz question
     * @param {string} id
     * @param {XAdminQuizQuestion} xAdminQuizQuestion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editQuizQuestion(id: string, xAdminQuizQuestion: XAdminQuizQuestion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuizQuestion>>;
    /**
     *
     * @summary Get specific quiz question
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuizQuestion(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuizQuestion>>;
    /**
     *
     * @summary List of quiz questions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizQuestions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminQuizQuestion>>>;
};
/**
 * QuestionsQuizGameApi - factory interface
 * @export
 */
export declare const QuestionsQuizGameApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add quiz question
     * @param {XAdminQuizQuestion} xAdminQuizQuestion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuizQuestion(xAdminQuizQuestion: XAdminQuizQuestion, options?: any): AxiosPromise<XAdminQuizQuestion>;
    /**
     *
     * @summary Delete quiz question
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuizQuestion(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit quiz question
     * @param {string} id
     * @param {XAdminQuizQuestion} xAdminQuizQuestion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editQuizQuestion(id: string, xAdminQuizQuestion: XAdminQuizQuestion, options?: any): AxiosPromise<XAdminQuizQuestion>;
    /**
     *
     * @summary Get specific quiz question
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuizQuestion(id: string, options?: any): AxiosPromise<XAdminQuizQuestion>;
    /**
     *
     * @summary List of quiz questions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizQuestions(options?: any): AxiosPromise<Array<XAdminQuizQuestion>>;
};
/**
 * QuestionsQuizGameApi - object-oriented interface
 * @export
 * @class QuestionsQuizGameApi
 * @extends {BaseAPI}
 */
export declare class QuestionsQuizGameApi extends BaseAPI {
    /**
     *
     * @summary Add quiz question
     * @param {XAdminQuizQuestion} xAdminQuizQuestion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsQuizGameApi
     */
    addQuizQuestion(xAdminQuizQuestion: XAdminQuizQuestion, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizQuestion>>;
    /**
     *
     * @summary Delete quiz question
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsQuizGameApi
     */
    deleteQuizQuestion(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit quiz question
     * @param {string} id
     * @param {XAdminQuizQuestion} xAdminQuizQuestion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsQuizGameApi
     */
    editQuizQuestion(id: string, xAdminQuizQuestion: XAdminQuizQuestion, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizQuestion>>;
    /**
     *
     * @summary Get specific quiz question
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsQuizGameApi
     */
    getQuizQuestion(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizQuestion>>;
    /**
     *
     * @summary List of quiz questions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsQuizGameApi
     */
    listQuizQuestions(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizQuestion[]>>;
}
/**
 * QuizzesQuizGameApi - axios parameter creator
 * @export
 */
export declare const QuizzesQuizGameApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add quiz
     * @param {XAdminQuiz} xAdminQuiz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuiz: (xAdminQuiz: XAdminQuiz, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete quiz
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuiz: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit quiz
     * @param {string} id
     * @param {XAdminQuiz} xAdminQuiz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editQuiz: (id: string, xAdminQuiz: XAdminQuiz, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific quiz
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuiz: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of quizzes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizzes: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * QuizzesQuizGameApi - functional programming interface
 * @export
 */
export declare const QuizzesQuizGameApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add quiz
     * @param {XAdminQuiz} xAdminQuiz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuiz(xAdminQuiz: XAdminQuiz, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuiz>>;
    /**
     *
     * @summary Delete quiz
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuiz(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit quiz
     * @param {string} id
     * @param {XAdminQuiz} xAdminQuiz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editQuiz(id: string, xAdminQuiz: XAdminQuiz, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuiz>>;
    /**
     *
     * @summary Get specific quiz
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuiz(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuiz>>;
    /**
     *
     * @summary List of quizzes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizzes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminQuiz>>>;
};
/**
 * QuizzesQuizGameApi - factory interface
 * @export
 */
export declare const QuizzesQuizGameApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add quiz
     * @param {XAdminQuiz} xAdminQuiz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuiz(xAdminQuiz: XAdminQuiz, options?: any): AxiosPromise<XAdminQuiz>;
    /**
     *
     * @summary Delete quiz
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuiz(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit quiz
     * @param {string} id
     * @param {XAdminQuiz} xAdminQuiz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editQuiz(id: string, xAdminQuiz: XAdminQuiz, options?: any): AxiosPromise<XAdminQuiz>;
    /**
     *
     * @summary Get specific quiz
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuiz(id: string, options?: any): AxiosPromise<XAdminQuiz>;
    /**
     *
     * @summary List of quizzes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizzes(options?: any): AxiosPromise<Array<XAdminQuiz>>;
};
/**
 * QuizzesQuizGameApi - object-oriented interface
 * @export
 * @class QuizzesQuizGameApi
 * @extends {BaseAPI}
 */
export declare class QuizzesQuizGameApi extends BaseAPI {
    /**
     *
     * @summary Add quiz
     * @param {XAdminQuiz} xAdminQuiz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizzesQuizGameApi
     */
    addQuiz(xAdminQuiz: XAdminQuiz, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuiz>>;
    /**
     *
     * @summary Delete quiz
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizzesQuizGameApi
     */
    deleteQuiz(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit quiz
     * @param {string} id
     * @param {XAdminQuiz} xAdminQuiz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizzesQuizGameApi
     */
    editQuiz(id: string, xAdminQuiz: XAdminQuiz, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuiz>>;
    /**
     *
     * @summary Get specific quiz
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizzesQuizGameApi
     */
    getQuiz(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuiz>>;
    /**
     *
     * @summary List of quizzes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizzesQuizGameApi
     */
    listQuizzes(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuiz[]>>;
}
/**
 * StoreCategoriesApi - axios parameter creator
 * @export
 */
export declare const StoreCategoriesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add store category
     * @param {XAdminStoreCategory} xAdminStoreCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoreCategory: (xAdminStoreCategory: XAdminStoreCategory, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete store category
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoreCategory: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit store category
     * @param {string} id
     * @param {XAdminStoreCategory} xAdminStoreCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStoreCategory: (id: string, xAdminStoreCategory: XAdminStoreCategory, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific store category
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoreCategory: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of store categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreCategories: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of store categories by Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreCategoriesByCompany: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StoreCategoriesApi - functional programming interface
 * @export
 */
export declare const StoreCategoriesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add store category
     * @param {XAdminStoreCategory} xAdminStoreCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoreCategory(xAdminStoreCategory: XAdminStoreCategory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStoreCategory>>;
    /**
     *
     * @summary Delete store category
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoreCategory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit store category
     * @param {string} id
     * @param {XAdminStoreCategory} xAdminStoreCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStoreCategory(id: string, xAdminStoreCategory: XAdminStoreCategory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStoreCategory>>;
    /**
     *
     * @summary Get specific store category
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoreCategory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStoreCategory>>;
    /**
     *
     * @summary List of store categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminStoreCategory>>>;
    /**
     *
     * @summary List of store categories by Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreCategoriesByCompany(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminStoreCategory>>>;
};
/**
 * StoreCategoriesApi - factory interface
 * @export
 */
export declare const StoreCategoriesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add store category
     * @param {XAdminStoreCategory} xAdminStoreCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoreCategory(xAdminStoreCategory: XAdminStoreCategory, options?: any): AxiosPromise<XAdminStoreCategory>;
    /**
     *
     * @summary Delete store category
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoreCategory(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit store category
     * @param {string} id
     * @param {XAdminStoreCategory} xAdminStoreCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStoreCategory(id: string, xAdminStoreCategory: XAdminStoreCategory, options?: any): AxiosPromise<XAdminStoreCategory>;
    /**
     *
     * @summary Get specific store category
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoreCategory(id: string, options?: any): AxiosPromise<XAdminStoreCategory>;
    /**
     *
     * @summary List of store categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreCategories(options?: any): AxiosPromise<Array<XAdminStoreCategory>>;
    /**
     *
     * @summary List of store categories by Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreCategoriesByCompany(options?: any): AxiosPromise<Array<XAdminStoreCategory>>;
};
/**
 * StoreCategoriesApi - object-oriented interface
 * @export
 * @class StoreCategoriesApi
 * @extends {BaseAPI}
 */
export declare class StoreCategoriesApi extends BaseAPI {
    /**
     *
     * @summary Add store category
     * @param {XAdminStoreCategory} xAdminStoreCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreCategoriesApi
     */
    addStoreCategory(xAdminStoreCategory: XAdminStoreCategory, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreCategory>>;
    /**
     *
     * @summary Delete store category
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreCategoriesApi
     */
    deleteStoreCategory(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit store category
     * @param {string} id
     * @param {XAdminStoreCategory} xAdminStoreCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreCategoriesApi
     */
    editStoreCategory(id: string, xAdminStoreCategory: XAdminStoreCategory, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreCategory>>;
    /**
     *
     * @summary Get specific store category
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreCategoriesApi
     */
    getStoreCategory(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreCategory>>;
    /**
     *
     * @summary List of store categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreCategoriesApi
     */
    listStoreCategories(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreCategory[]>>;
    /**
     *
     * @summary List of store categories by Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreCategoriesApi
     */
    listStoreCategoriesByCompany(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreCategory[]>>;
}
/**
 * StoreClientsApi - axios parameter creator
 * @export
 */
export declare const StoreClientsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add store client
     * @param {XAdminStoreClient} xAdminStoreClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoreClient: (xAdminStoreClient: XAdminStoreClient, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete store client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoreClient: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit store client
     * @param {string} id
     * @param {XAdminStoreClient} xAdminStoreClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStoreClient: (id: string, xAdminStoreClient: XAdminStoreClient, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Specific store client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoreClient: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of store clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreClients: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of store clients by company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreClientsByCompany: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StoreClientsApi - functional programming interface
 * @export
 */
export declare const StoreClientsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add store client
     * @param {XAdminStoreClient} xAdminStoreClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoreClient(xAdminStoreClient: XAdminStoreClient, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStoreClient>>;
    /**
     *
     * @summary Delete store client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoreClient(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit store client
     * @param {string} id
     * @param {XAdminStoreClient} xAdminStoreClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStoreClient(id: string, xAdminStoreClient: XAdminStoreClient, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStoreClient>>;
    /**
     *
     * @summary Get Specific store client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoreClient(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStoreClient>>;
    /**
     *
     * @summary List of store clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreClients(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminStoreClient>>>;
    /**
     *
     * @summary List of store clients by company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreClientsByCompany(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminStoreClient>>>;
};
/**
 * StoreClientsApi - factory interface
 * @export
 */
export declare const StoreClientsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add store client
     * @param {XAdminStoreClient} xAdminStoreClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoreClient(xAdminStoreClient: XAdminStoreClient, options?: any): AxiosPromise<XAdminStoreClient>;
    /**
     *
     * @summary Delete store client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoreClient(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit store client
     * @param {string} id
     * @param {XAdminStoreClient} xAdminStoreClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStoreClient(id: string, xAdminStoreClient: XAdminStoreClient, options?: any): AxiosPromise<XAdminStoreClient>;
    /**
     *
     * @summary Get Specific store client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoreClient(id: string, options?: any): AxiosPromise<XAdminStoreClient>;
    /**
     *
     * @summary List of store clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreClients(options?: any): AxiosPromise<Array<XAdminStoreClient>>;
    /**
     *
     * @summary List of store clients by company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreClientsByCompany(options?: any): AxiosPromise<Array<XAdminStoreClient>>;
};
/**
 * StoreClientsApi - object-oriented interface
 * @export
 * @class StoreClientsApi
 * @extends {BaseAPI}
 */
export declare class StoreClientsApi extends BaseAPI {
    /**
     *
     * @summary Add store client
     * @param {XAdminStoreClient} xAdminStoreClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreClientsApi
     */
    addStoreClient(xAdminStoreClient: XAdminStoreClient, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreClient>>;
    /**
     *
     * @summary Delete store client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreClientsApi
     */
    deleteStoreClient(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit store client
     * @param {string} id
     * @param {XAdminStoreClient} xAdminStoreClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreClientsApi
     */
    editStoreClient(id: string, xAdminStoreClient: XAdminStoreClient, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreClient>>;
    /**
     *
     * @summary Get Specific store client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreClientsApi
     */
    getStoreClient(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreClient>>;
    /**
     *
     * @summary List of store clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreClientsApi
     */
    listStoreClients(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreClient[]>>;
    /**
     *
     * @summary List of store clients by company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreClientsApi
     */
    listStoreClientsByCompany(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreClient[]>>;
}
/**
 * StoreOrdersApi - axios parameter creator
 * @export
 */
export declare const StoreOrdersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add store order
     * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoreOrder: (xAdminStoreOrderProduct: XAdminStoreOrderProduct, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete store order
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoreOrder: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit store order
     * @param {string} id
     * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStoreOrder: (id: string, xAdminStoreOrderProduct: XAdminStoreOrderProduct, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific of store order
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoreOrder: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of store orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreOrders: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StoreOrdersApi - functional programming interface
 * @export
 */
export declare const StoreOrdersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add store order
     * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoreOrder(xAdminStoreOrderProduct: XAdminStoreOrderProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStoreOrderProduct>>;
    /**
     *
     * @summary Delete store order
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoreOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit store order
     * @param {string} id
     * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStoreOrder(id: string, xAdminStoreOrderProduct: XAdminStoreOrderProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStoreOrderProduct>>;
    /**
     *
     * @summary Get specific of store order
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoreOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStoreOrderProduct>>;
    /**
     *
     * @summary List of store orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreOrders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminStoreOrderProduct>>>;
};
/**
 * StoreOrdersApi - factory interface
 * @export
 */
export declare const StoreOrdersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add store order
     * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoreOrder(xAdminStoreOrderProduct: XAdminStoreOrderProduct, options?: any): AxiosPromise<XAdminStoreOrderProduct>;
    /**
     *
     * @summary Delete store order
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoreOrder(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit store order
     * @param {string} id
     * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStoreOrder(id: string, xAdminStoreOrderProduct: XAdminStoreOrderProduct, options?: any): AxiosPromise<XAdminStoreOrderProduct>;
    /**
     *
     * @summary Get specific of store order
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoreOrder(id: string, options?: any): AxiosPromise<XAdminStoreOrderProduct>;
    /**
     *
     * @summary List of store orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreOrders(options?: any): AxiosPromise<Array<XAdminStoreOrderProduct>>;
};
/**
 * StoreOrdersApi - object-oriented interface
 * @export
 * @class StoreOrdersApi
 * @extends {BaseAPI}
 */
export declare class StoreOrdersApi extends BaseAPI {
    /**
     *
     * @summary Add store order
     * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreOrdersApi
     */
    addStoreOrder(xAdminStoreOrderProduct: XAdminStoreOrderProduct, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreOrderProduct>>;
    /**
     *
     * @summary Delete store order
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreOrdersApi
     */
    deleteStoreOrder(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit store order
     * @param {string} id
     * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreOrdersApi
     */
    editStoreOrder(id: string, xAdminStoreOrderProduct: XAdminStoreOrderProduct, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreOrderProduct>>;
    /**
     *
     * @summary Get specific of store order
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreOrdersApi
     */
    getStoreOrder(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreOrderProduct>>;
    /**
     *
     * @summary List of store orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreOrdersApi
     */
    listStoreOrders(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreOrderProduct[]>>;
}
/**
 * StoreProductsApi - axios parameter creator
 * @export
 */
export declare const StoreProductsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add store product
     * @param {XAdminStoreProduct} xAdminStoreProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoreProduct: (xAdminStoreProduct: XAdminStoreProduct, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete store product
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoreProduct: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit store product
     * @param {string} id
     * @param {XAdminStoreProduct} xAdminStoreProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStoreProduct: (id: string, xAdminStoreProduct: XAdminStoreProduct, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific store product
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoreProduct: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of store products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreProducts: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of store products by Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreProductsByCompany: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StoreProductsApi - functional programming interface
 * @export
 */
export declare const StoreProductsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add store product
     * @param {XAdminStoreProduct} xAdminStoreProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoreProduct(xAdminStoreProduct: XAdminStoreProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStoreProduct>>;
    /**
     *
     * @summary Delete store product
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoreProduct(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit store product
     * @param {string} id
     * @param {XAdminStoreProduct} xAdminStoreProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStoreProduct(id: string, xAdminStoreProduct: XAdminStoreProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStoreProduct>>;
    /**
     *
     * @summary Get specific store product
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoreProduct(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStoreProduct>>;
    /**
     *
     * @summary List of store products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreProducts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminStoreProduct>>>;
    /**
     *
     * @summary List of store products by Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreProductsByCompany(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminStoreProduct>>>;
};
/**
 * StoreProductsApi - factory interface
 * @export
 */
export declare const StoreProductsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add store product
     * @param {XAdminStoreProduct} xAdminStoreProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoreProduct(xAdminStoreProduct: XAdminStoreProduct, options?: any): AxiosPromise<XAdminStoreProduct>;
    /**
     *
     * @summary Delete store product
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoreProduct(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit store product
     * @param {string} id
     * @param {XAdminStoreProduct} xAdminStoreProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStoreProduct(id: string, xAdminStoreProduct: XAdminStoreProduct, options?: any): AxiosPromise<XAdminStoreProduct>;
    /**
     *
     * @summary Get specific store product
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoreProduct(id: string, options?: any): AxiosPromise<XAdminStoreProduct>;
    /**
     *
     * @summary List of store products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreProducts(options?: any): AxiosPromise<Array<XAdminStoreProduct>>;
    /**
     *
     * @summary List of store products by Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStoreProductsByCompany(options?: any): AxiosPromise<Array<XAdminStoreProduct>>;
};
/**
 * StoreProductsApi - object-oriented interface
 * @export
 * @class StoreProductsApi
 * @extends {BaseAPI}
 */
export declare class StoreProductsApi extends BaseAPI {
    /**
     *
     * @summary Add store product
     * @param {XAdminStoreProduct} xAdminStoreProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreProductsApi
     */
    addStoreProduct(xAdminStoreProduct: XAdminStoreProduct, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreProduct>>;
    /**
     *
     * @summary Delete store product
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreProductsApi
     */
    deleteStoreProduct(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit store product
     * @param {string} id
     * @param {XAdminStoreProduct} xAdminStoreProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreProductsApi
     */
    editStoreProduct(id: string, xAdminStoreProduct: XAdminStoreProduct, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreProduct>>;
    /**
     *
     * @summary Get specific store product
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreProductsApi
     */
    getStoreProduct(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreProduct>>;
    /**
     *
     * @summary List of store products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreProductsApi
     */
    listStoreProducts(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreProduct[]>>;
    /**
     *
     * @summary List of store products by Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreProductsApi
     */
    listStoreProductsByCompany(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStoreProduct[]>>;
}
/**
 * StorePurchasesApi - axios parameter creator
 * @export
 */
export declare const StorePurchasesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add store purchase
     * @param {XAdminStorePurchaseInput} xAdminStorePurchaseInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStorePurchase: (xAdminStorePurchaseInput: XAdminStorePurchaseInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StorePurchasesApi - functional programming interface
 * @export
 */
export declare const StorePurchasesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add store purchase
     * @param {XAdminStorePurchaseInput} xAdminStorePurchaseInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStorePurchase(xAdminStorePurchaseInput: XAdminStorePurchaseInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminStorePurchaseOutput>>;
};
/**
 * StorePurchasesApi - factory interface
 * @export
 */
export declare const StorePurchasesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add store purchase
     * @param {XAdminStorePurchaseInput} xAdminStorePurchaseInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStorePurchase(xAdminStorePurchaseInput: XAdminStorePurchaseInput, options?: any): AxiosPromise<XAdminStorePurchaseOutput>;
};
/**
 * StorePurchasesApi - object-oriented interface
 * @export
 * @class StorePurchasesApi
 * @extends {BaseAPI}
 */
export declare class StorePurchasesApi extends BaseAPI {
    /**
     *
     * @summary Add store purchase
     * @param {XAdminStorePurchaseInput} xAdminStorePurchaseInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorePurchasesApi
     */
    addStorePurchase(xAdminStorePurchaseInput: XAdminStorePurchaseInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminStorePurchaseOutput>>;
}
/**
 * TranslationsApi - axios parameter creator
 * @export
 */
export declare const TranslationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add translation
     * @param {XAdminTranslation} xAdminTranslation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTranslation: (xAdminTranslation: XAdminTranslation, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete translation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTranslation: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit translation
     * @param {string} id
     * @param {XAdminTranslation} xAdminTranslation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editTranslation: (id: string, xAdminTranslation: XAdminTranslation, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific translation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTranslation: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of translations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTranslations: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TranslationsApi - functional programming interface
 * @export
 */
export declare const TranslationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add translation
     * @param {XAdminTranslation} xAdminTranslation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTranslation(xAdminTranslation: XAdminTranslation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminTranslation>>;
    /**
     *
     * @summary Delete translation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTranslation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit translation
     * @param {string} id
     * @param {XAdminTranslation} xAdminTranslation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editTranslation(id: string, xAdminTranslation: XAdminTranslation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminTranslation>>;
    /**
     *
     * @summary Get specific translation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTranslation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminTranslation>>;
    /**
     *
     * @summary List of translations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTranslations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminTranslation>>>;
};
/**
 * TranslationsApi - factory interface
 * @export
 */
export declare const TranslationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add translation
     * @param {XAdminTranslation} xAdminTranslation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTranslation(xAdminTranslation: XAdminTranslation, options?: any): AxiosPromise<XAdminTranslation>;
    /**
     *
     * @summary Delete translation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTranslation(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit translation
     * @param {string} id
     * @param {XAdminTranslation} xAdminTranslation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editTranslation(id: string, xAdminTranslation: XAdminTranslation, options?: any): AxiosPromise<XAdminTranslation>;
    /**
     *
     * @summary Get specific translation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTranslation(id: string, options?: any): AxiosPromise<XAdminTranslation>;
    /**
     *
     * @summary List of translations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTranslations(options?: any): AxiosPromise<Array<XAdminTranslation>>;
};
/**
 * TranslationsApi - object-oriented interface
 * @export
 * @class TranslationsApi
 * @extends {BaseAPI}
 */
export declare class TranslationsApi extends BaseAPI {
    /**
     *
     * @summary Add translation
     * @param {XAdminTranslation} xAdminTranslation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    addTranslation(xAdminTranslation: XAdminTranslation, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminTranslation>>;
    /**
     *
     * @summary Delete translation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    deleteTranslation(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit translation
     * @param {string} id
     * @param {XAdminTranslation} xAdminTranslation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    editTranslation(id: string, xAdminTranslation: XAdminTranslation, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminTranslation>>;
    /**
     *
     * @summary Get specific translation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    getTranslation(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminTranslation>>;
    /**
     *
     * @summary List of translations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    listTranslations(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminTranslation[]>>;
}
/**
 * TypesApi - axios parameter creator
 * @export
 */
export declare const TypesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add type
     * @param {XAdminType} xAdminType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addType: (xAdminType: XAdminType, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteType: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit type
     * @param {string} id
     * @param {XAdminType} xAdminType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editType: (id: string, xAdminType: XAdminType, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getType: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTypes: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TypesApi - functional programming interface
 * @export
 */
export declare const TypesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add type
     * @param {XAdminType} xAdminType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addType(xAdminType: XAdminType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminType>>;
    /**
     *
     * @summary Delete type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteType(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit type
     * @param {string} id
     * @param {XAdminType} xAdminType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editType(id: string, xAdminType: XAdminType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminType>>;
    /**
     *
     * @summary Get specific type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getType(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminType>>;
    /**
     *
     * @summary List of types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminType>>>;
};
/**
 * TypesApi - factory interface
 * @export
 */
export declare const TypesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add type
     * @param {XAdminType} xAdminType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addType(xAdminType: XAdminType, options?: any): AxiosPromise<XAdminType>;
    /**
     *
     * @summary Delete type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteType(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit type
     * @param {string} id
     * @param {XAdminType} xAdminType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editType(id: string, xAdminType: XAdminType, options?: any): AxiosPromise<XAdminType>;
    /**
     *
     * @summary Get specific type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getType(id: string, options?: any): AxiosPromise<XAdminType>;
    /**
     *
     * @summary List of types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTypes(options?: any): AxiosPromise<Array<XAdminType>>;
};
/**
 * TypesApi - object-oriented interface
 * @export
 * @class TypesApi
 * @extends {BaseAPI}
 */
export declare class TypesApi extends BaseAPI {
    /**
     *
     * @summary Add type
     * @param {XAdminType} xAdminType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypesApi
     */
    addType(xAdminType: XAdminType, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminType>>;
    /**
     *
     * @summary Delete type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypesApi
     */
    deleteType(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit type
     * @param {string} id
     * @param {XAdminType} xAdminType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypesApi
     */
    editType(id: string, xAdminType: XAdminType, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminType>>;
    /**
     *
     * @summary Get specific type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypesApi
     */
    getType(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminType>>;
    /**
     *
     * @summary List of types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypesApi
     */
    listTypes(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminType[]>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add user
     * @param {XAdminUser} xAdminUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUser: (xAdminUser: XAdminUser, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit user
     * @param {string} id
     * @param {XAdminUser} xAdminUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUser: (id: string, xAdminUser: XAdminUser, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add user
     * @param {XAdminUser} xAdminUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUser(xAdminUser: XAdminUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminUser>>;
    /**
     *
     * @summary Delete user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit user
     * @param {string} id
     * @param {XAdminUser} xAdminUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUser(id: string, xAdminUser: XAdminUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminUser>>;
    /**
     *
     * @summary Get specific user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminUser>>;
    /**
     *
     * @summary List of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminUser>>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add user
     * @param {XAdminUser} xAdminUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUser(xAdminUser: XAdminUser, options?: any): AxiosPromise<XAdminUser>;
    /**
     *
     * @summary Delete user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit user
     * @param {string} id
     * @param {XAdminUser} xAdminUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUser(id: string, xAdminUser: XAdminUser, options?: any): AxiosPromise<XAdminUser>;
    /**
     *
     * @summary Get specific user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: string, options?: any): AxiosPromise<XAdminUser>;
    /**
     *
     * @summary List of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: any): AxiosPromise<Array<XAdminUser>>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     *
     * @summary Add user
     * @param {XAdminUser} xAdminUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    addUser(xAdminUser: XAdminUser, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminUser>>;
    /**
     *
     * @summary Delete user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit user
     * @param {string} id
     * @param {XAdminUser} xAdminUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    editUser(id: string, xAdminUser: XAdminUser, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminUser>>;
    /**
     *
     * @summary Get specific user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminUser>>;
    /**
     *
     * @summary List of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUsers(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminUser[]>>;
}
/**
 * UsersCompaniesApi - axios parameter creator
 * @export
 */
export declare const UsersCompaniesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add user company
     * @param {XAdminUserCompany} xAdminUserCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserCompany: (xAdminUserCompany: XAdminUserCompany, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete user company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserCompany: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit user company
     * @param {string} id
     * @param {XAdminUserCompany} xAdminUserCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserCompany: (id: string, xAdminUserCompany: XAdminUserCompany, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific user company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCompany: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of user companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserCompanies: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersCompaniesApi - functional programming interface
 * @export
 */
export declare const UsersCompaniesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add user company
     * @param {XAdminUserCompany} xAdminUserCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserCompany(xAdminUserCompany: XAdminUserCompany, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminUserCompany>>;
    /**
     *
     * @summary Delete user company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserCompany(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit user company
     * @param {string} id
     * @param {XAdminUserCompany} xAdminUserCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserCompany(id: string, xAdminUserCompany: XAdminUserCompany, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminUserCompany>>;
    /**
     *
     * @summary Get specific user company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCompany(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminUserCompany>>;
    /**
     *
     * @summary List of user companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserCompanies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminUserCompany>>>;
};
/**
 * UsersCompaniesApi - factory interface
 * @export
 */
export declare const UsersCompaniesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add user company
     * @param {XAdminUserCompany} xAdminUserCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserCompany(xAdminUserCompany: XAdminUserCompany, options?: any): AxiosPromise<XAdminUserCompany>;
    /**
     *
     * @summary Delete user company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserCompany(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit user company
     * @param {string} id
     * @param {XAdminUserCompany} xAdminUserCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserCompany(id: string, xAdminUserCompany: XAdminUserCompany, options?: any): AxiosPromise<XAdminUserCompany>;
    /**
     *
     * @summary Get specific user company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCompany(id: string, options?: any): AxiosPromise<XAdminUserCompany>;
    /**
     *
     * @summary List of user companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserCompanies(options?: any): AxiosPromise<Array<XAdminUserCompany>>;
};
/**
 * UsersCompaniesApi - object-oriented interface
 * @export
 * @class UsersCompaniesApi
 * @extends {BaseAPI}
 */
export declare class UsersCompaniesApi extends BaseAPI {
    /**
     *
     * @summary Add user company
     * @param {XAdminUserCompany} xAdminUserCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCompaniesApi
     */
    addUserCompany(xAdminUserCompany: XAdminUserCompany, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminUserCompany>>;
    /**
     *
     * @summary Delete user company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCompaniesApi
     */
    deleteUserCompany(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit user company
     * @param {string} id
     * @param {XAdminUserCompany} xAdminUserCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCompaniesApi
     */
    editUserCompany(id: string, xAdminUserCompany: XAdminUserCompany, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminUserCompany>>;
    /**
     *
     * @summary Get specific user company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCompaniesApi
     */
    getUserCompany(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminUserCompany>>;
    /**
     *
     * @summary List of user companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCompaniesApi
     */
    listUserCompanies(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminUserCompany[]>>;
}
/**
 * UsersDataQuizGameApi - axios parameter creator
 * @export
 */
export declare const UsersDataQuizGameApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add user data quiz game
     * @param {XAdminQuizUserData} xAdminQuizUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserDataQuiz: (xAdminQuizUserData: XAdminQuizUserData, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete user data quiz game
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserDataQuiz: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit user data quiz game
     * @param {string} id
     * @param {XAdminQuizUserData} xAdminQuizUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserDataQuiz: (id: string, xAdminQuizUserData: XAdminQuizUserData, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific user data quiz game
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuizUserData: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of users data quiz game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizUserData: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersDataQuizGameApi - functional programming interface
 * @export
 */
export declare const UsersDataQuizGameApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add user data quiz game
     * @param {XAdminQuizUserData} xAdminQuizUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserDataQuiz(xAdminQuizUserData: XAdminQuizUserData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuizUserData>>;
    /**
     *
     * @summary Delete user data quiz game
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserDataQuiz(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit user data quiz game
     * @param {string} id
     * @param {XAdminQuizUserData} xAdminQuizUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserDataQuiz(id: string, xAdminQuizUserData: XAdminQuizUserData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuizUserData>>;
    /**
     *
     * @summary Get specific user data quiz game
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuizUserData(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminQuizUserData>>;
    /**
     *
     * @summary List of users data quiz game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizUserData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminQuizUserData>>>;
};
/**
 * UsersDataQuizGameApi - factory interface
 * @export
 */
export declare const UsersDataQuizGameApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add user data quiz game
     * @param {XAdminQuizUserData} xAdminQuizUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserDataQuiz(xAdminQuizUserData: XAdminQuizUserData, options?: any): AxiosPromise<XAdminQuizUserData>;
    /**
     *
     * @summary Delete user data quiz game
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserDataQuiz(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit user data quiz game
     * @param {string} id
     * @param {XAdminQuizUserData} xAdminQuizUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserDataQuiz(id: string, xAdminQuizUserData: XAdminQuizUserData, options?: any): AxiosPromise<XAdminQuizUserData>;
    /**
     *
     * @summary Get specific user data quiz game
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuizUserData(id: string, options?: any): AxiosPromise<XAdminQuizUserData>;
    /**
     *
     * @summary List of users data quiz game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQuizUserData(options?: any): AxiosPromise<Array<XAdminQuizUserData>>;
};
/**
 * UsersDataQuizGameApi - object-oriented interface
 * @export
 * @class UsersDataQuizGameApi
 * @extends {BaseAPI}
 */
export declare class UsersDataQuizGameApi extends BaseAPI {
    /**
     *
     * @summary Add user data quiz game
     * @param {XAdminQuizUserData} xAdminQuizUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDataQuizGameApi
     */
    addUserDataQuiz(xAdminQuizUserData: XAdminQuizUserData, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizUserData>>;
    /**
     *
     * @summary Delete user data quiz game
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDataQuizGameApi
     */
    deleteUserDataQuiz(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit user data quiz game
     * @param {string} id
     * @param {XAdminQuizUserData} xAdminQuizUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDataQuizGameApi
     */
    editUserDataQuiz(id: string, xAdminQuizUserData: XAdminQuizUserData, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizUserData>>;
    /**
     *
     * @summary Get specific user data quiz game
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDataQuizGameApi
     */
    getQuizUserData(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizUserData>>;
    /**
     *
     * @summary List of users data quiz game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDataQuizGameApi
     */
    listQuizUserData(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminQuizUserData[]>>;
}
/**
 * UsersPermissionsApi - axios parameter creator
 * @export
 */
export declare const UsersPermissionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add user permission
     * @param {XAdminUserPermission} xAdminUserPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserPermission: (xAdminUserPermission: XAdminUserPermission, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete user permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserPermission: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Edit user permission
     * @param {string} id
     * @param {XAdminUserPermission} xAdminUserPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserPermission: (id: string, xAdminUserPermission: XAdminUserPermission, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific user permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermission: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of user permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserPermissions: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersPermissionsApi - functional programming interface
 * @export
 */
export declare const UsersPermissionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add user permission
     * @param {XAdminUserPermission} xAdminUserPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserPermission(xAdminUserPermission: XAdminUserPermission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminUserPermission>>;
    /**
     *
     * @summary Delete user permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserPermission(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Edit user permission
     * @param {string} id
     * @param {XAdminUserPermission} xAdminUserPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserPermission(id: string, xAdminUserPermission: XAdminUserPermission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminUserPermission>>;
    /**
     *
     * @summary Get specific user permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermission(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XAdminUserPermission>>;
    /**
     *
     * @summary List of user permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserPermissions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<XAdminUserPermission>>>;
};
/**
 * UsersPermissionsApi - factory interface
 * @export
 */
export declare const UsersPermissionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add user permission
     * @param {XAdminUserPermission} xAdminUserPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserPermission(xAdminUserPermission: XAdminUserPermission, options?: any): AxiosPromise<XAdminUserPermission>;
    /**
     *
     * @summary Delete user permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserPermission(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Edit user permission
     * @param {string} id
     * @param {XAdminUserPermission} xAdminUserPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserPermission(id: string, xAdminUserPermission: XAdminUserPermission, options?: any): AxiosPromise<XAdminUserPermission>;
    /**
     *
     * @summary Get specific user permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermission(id: string, options?: any): AxiosPromise<XAdminUserPermission>;
    /**
     *
     * @summary List of user permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserPermissions(options?: any): AxiosPromise<Array<XAdminUserPermission>>;
};
/**
 * UsersPermissionsApi - object-oriented interface
 * @export
 * @class UsersPermissionsApi
 * @extends {BaseAPI}
 */
export declare class UsersPermissionsApi extends BaseAPI {
    /**
     *
     * @summary Add user permission
     * @param {XAdminUserPermission} xAdminUserPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsApi
     */
    addUserPermission(xAdminUserPermission: XAdminUserPermission, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminUserPermission>>;
    /**
     *
     * @summary Delete user permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsApi
     */
    deleteUserPermission(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Edit user permission
     * @param {string} id
     * @param {XAdminUserPermission} xAdminUserPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsApi
     */
    editUserPermission(id: string, xAdminUserPermission: XAdminUserPermission, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminUserPermission>>;
    /**
     *
     * @summary Get specific user permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsApi
     */
    getUserPermission(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminUserPermission>>;
    /**
     *
     * @summary List of user permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsApi
     */
    listUserPermissions(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<XAdminUserPermission[]>>;
}
