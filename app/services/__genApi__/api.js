"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * X Admin API
 * X Admin API Description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersPermissionsApi = exports.UsersPermissionsApiFactory = exports.UsersPermissionsApiFp = exports.UsersPermissionsApiAxiosParamCreator = exports.UsersDataQuizGameApi = exports.UsersDataQuizGameApiFactory = exports.UsersDataQuizGameApiFp = exports.UsersDataQuizGameApiAxiosParamCreator = exports.UsersCompaniesApi = exports.UsersCompaniesApiFactory = exports.UsersCompaniesApiFp = exports.UsersCompaniesApiAxiosParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TypesApi = exports.TypesApiFactory = exports.TypesApiFp = exports.TypesApiAxiosParamCreator = exports.TranslationsApi = exports.TranslationsApiFactory = exports.TranslationsApiFp = exports.TranslationsApiAxiosParamCreator = exports.StorePurchasesApi = exports.StorePurchasesApiFactory = exports.StorePurchasesApiFp = exports.StorePurchasesApiAxiosParamCreator = exports.StoreProductsApi = exports.StoreProductsApiFactory = exports.StoreProductsApiFp = exports.StoreProductsApiAxiosParamCreator = exports.StoreOrdersApi = exports.StoreOrdersApiFactory = exports.StoreOrdersApiFp = exports.StoreOrdersApiAxiosParamCreator = exports.StoreClientsApi = exports.StoreClientsApiFactory = exports.StoreClientsApiFp = exports.StoreClientsApiAxiosParamCreator = exports.StoreCategoriesApi = exports.StoreCategoriesApiFactory = exports.StoreCategoriesApiFp = exports.StoreCategoriesApiAxiosParamCreator = exports.QuizzesQuizGameApi = exports.QuizzesQuizGameApiFactory = exports.QuizzesQuizGameApiFp = exports.QuizzesQuizGameApiAxiosParamCreator = exports.QuestionsQuizGameApi = exports.QuestionsQuizGameApiFactory = exports.QuestionsQuizGameApiFp = exports.QuestionsQuizGameApiAxiosParamCreator = exports.QuestionsAnswersQuizGameApi = exports.QuestionsAnswersQuizGameApiFactory = exports.QuestionsAnswersQuizGameApiFp = exports.QuestionsAnswersQuizGameApiAxiosParamCreator = exports.PermissionsApi = exports.PermissionsApiFactory = exports.PermissionsApiFp = exports.PermissionsApiAxiosParamCreator = exports.NewsApi = exports.NewsApiFactory = exports.NewsApiFp = exports.NewsApiAxiosParamCreator = exports.ModesApi = exports.ModesApiFactory = exports.ModesApiFp = exports.ModesApiAxiosParamCreator = exports.MenusApi = exports.MenusApiFactory = exports.MenusApiFp = exports.MenusApiAxiosParamCreator = exports.FunctionalitiesApi = exports.FunctionalitiesApiFactory = exports.FunctionalitiesApiFp = exports.FunctionalitiesApiAxiosParamCreator = exports.FieldsApi = exports.FieldsApiFactory = exports.FieldsApiFp = exports.FieldsApiAxiosParamCreator = exports.EntitiesRecordsApi = exports.EntitiesRecordsApiFactory = exports.EntitiesRecordsApiFp = exports.EntitiesRecordsApiAxiosParamCreator = exports.EntitiesApi = exports.EntitiesApiFactory = exports.EntitiesApiFp = exports.EntitiesApiAxiosParamCreator = exports.EngineQuizGameApi = exports.EngineQuizGameApiFactory = exports.EngineQuizGameApiFp = exports.EngineQuizGameApiAxiosParamCreator = exports.ConfigurationsApi = exports.ConfigurationsApiFactory = exports.ConfigurationsApiFp = exports.ConfigurationsApiAxiosParamCreator = exports.CompaniesApi = exports.CompaniesApiFactory = exports.CompaniesApiFp = exports.CompaniesApiAxiosParamCreator = exports.AuthenticationApi = exports.AuthenticationApiFactory = exports.AuthenticationApiFp = exports.AuthenticationApiAxiosParamCreator = exports.AppApi = exports.AppApiFactory = exports.AppApiFp = exports.AppApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
/**
 * AppApi - axios parameter creator
 * @export
 */
exports.AppApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerHealthCheck: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/app/health-check";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerVersion: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/app/version";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * AppApi - functional programming interface
 * @export
 */
exports.AppApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.AppApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerHealthCheck: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.appControllerHealthCheck(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerVersion: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.appControllerVersion(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * AppApi - factory interface
 * @export
 */
exports.AppApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.AppApiFp(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerHealthCheck: function (options) {
            return localVarFp.appControllerHealthCheck(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerVersion: function (options) {
            return localVarFp.appControllerVersion(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
var AppApi = /** @class */ (function (_super) {
    __extends(AppApi, _super);
    function AppApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    AppApi.prototype.appControllerHealthCheck = function (options) {
        var _this = this;
        return exports.AppApiFp(this.configuration).appControllerHealthCheck(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    AppApi.prototype.appControllerVersion = function (options) {
        var _this = this;
        return exports.AppApiFp(this.configuration).appControllerVersion(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AppApi;
}(base_1.BaseAPI));
exports.AppApi = AppApi;
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
exports.AuthenticationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Login existing user
         * @param {XAdminAuthLoginServiceInput} xAdminAuthLoginServiceInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: function (xAdminAuthLoginServiceInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'xAdminAuthLoginServiceInput' is not null or undefined
                    common_1.assertParamExists('login', 'xAdminAuthLoginServiceInput', xAdminAuthLoginServiceInput);
                    localVarPath = "/api/auth/login";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminAuthLoginServiceInput, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Login or register existing user from external provider
         * @param {XAdminAuthLoginExternalProviderServiceInput} xAdminAuthLoginExternalProviderServiceInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginFromExternalProvider: function (xAdminAuthLoginExternalProviderServiceInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'xAdminAuthLoginExternalProviderServiceInput' is not null or undefined
                    common_1.assertParamExists('loginFromExternalProvider', 'xAdminAuthLoginExternalProviderServiceInput', xAdminAuthLoginExternalProviderServiceInput);
                    localVarPath = "/api/auth/loginFromExternalProvider";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminAuthLoginExternalProviderServiceInput, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get information about logged user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/auth/me";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Register new user
         * @param {XAdminAuthRegisterServiceInput} xAdminAuthRegisterServiceInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: function (xAdminAuthRegisterServiceInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'xAdminAuthRegisterServiceInput' is not null or undefined
                    common_1.assertParamExists('register', 'xAdminAuthRegisterServiceInput', xAdminAuthRegisterServiceInput);
                    localVarPath = "/api/auth/register";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminAuthRegisterServiceInput, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
exports.AuthenticationApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.AuthenticationApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Login existing user
         * @param {XAdminAuthLoginServiceInput} xAdminAuthLoginServiceInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: function (xAdminAuthLoginServiceInput, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.login(xAdminAuthLoginServiceInput, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Login or register existing user from external provider
         * @param {XAdminAuthLoginExternalProviderServiceInput} xAdminAuthLoginExternalProviderServiceInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginFromExternalProvider: function (xAdminAuthLoginExternalProviderServiceInput, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.loginFromExternalProvider(xAdminAuthLoginExternalProviderServiceInput, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get information about logged user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.me(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Register new user
         * @param {XAdminAuthRegisterServiceInput} xAdminAuthRegisterServiceInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: function (xAdminAuthRegisterServiceInput, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.register(xAdminAuthRegisterServiceInput, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
exports.AuthenticationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.AuthenticationApiFp(configuration);
    return {
        /**
         *
         * @summary Login existing user
         * @param {XAdminAuthLoginServiceInput} xAdminAuthLoginServiceInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: function (xAdminAuthLoginServiceInput, options) {
            return localVarFp.login(xAdminAuthLoginServiceInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Login or register existing user from external provider
         * @param {XAdminAuthLoginExternalProviderServiceInput} xAdminAuthLoginExternalProviderServiceInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginFromExternalProvider: function (xAdminAuthLoginExternalProviderServiceInput, options) {
            return localVarFp.loginFromExternalProvider(xAdminAuthLoginExternalProviderServiceInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get information about logged user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me: function (options) {
            return localVarFp.me(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Register new user
         * @param {XAdminAuthRegisterServiceInput} xAdminAuthRegisterServiceInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: function (xAdminAuthRegisterServiceInput, options) {
            return localVarFp.register(xAdminAuthRegisterServiceInput, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
var AuthenticationApi = /** @class */ (function (_super) {
    __extends(AuthenticationApi, _super);
    function AuthenticationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Login existing user
     * @param {XAdminAuthLoginServiceInput} xAdminAuthLoginServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    AuthenticationApi.prototype.login = function (xAdminAuthLoginServiceInput, options) {
        var _this = this;
        return exports.AuthenticationApiFp(this.configuration).login(xAdminAuthLoginServiceInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Login or register existing user from external provider
     * @param {XAdminAuthLoginExternalProviderServiceInput} xAdminAuthLoginExternalProviderServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    AuthenticationApi.prototype.loginFromExternalProvider = function (xAdminAuthLoginExternalProviderServiceInput, options) {
        var _this = this;
        return exports.AuthenticationApiFp(this.configuration).loginFromExternalProvider(xAdminAuthLoginExternalProviderServiceInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get information about logged user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    AuthenticationApi.prototype.me = function (options) {
        var _this = this;
        return exports.AuthenticationApiFp(this.configuration).me(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Register new user
     * @param {XAdminAuthRegisterServiceInput} xAdminAuthRegisterServiceInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    AuthenticationApi.prototype.register = function (xAdminAuthRegisterServiceInput, options) {
        var _this = this;
        return exports.AuthenticationApiFp(this.configuration).register(xAdminAuthRegisterServiceInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuthenticationApi;
}(base_1.BaseAPI));
exports.AuthenticationApi = AuthenticationApi;
/**
 * CompaniesApi - axios parameter creator
 * @export
 */
exports.CompaniesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add new company
         * @param {XAdminCompany} xAdminCompany
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCompany: function (xAdminCompany, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminCompany' is not null or undefined
                            common_1.assertParamExists('addCompany', 'xAdminCompany', xAdminCompany);
                            localVarPath = "/api/companies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminCompany, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete existing company
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteCompany', 'id', id);
                            localVarPath = "/api/companies/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit existing company
         * @param {string} id
         * @param {XAdminCompany} xAdminCompany
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCompany: function (id, xAdminCompany, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editCompany', 'id', id);
                            // verify required parameter 'xAdminCompany' is not null or undefined
                            common_1.assertParamExists('editCompany', 'xAdminCompany', xAdminCompany);
                            localVarPath = "/api/companies/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminCompany, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific company
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getCompany', 'id', id);
                            localVarPath = "/api/companies/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanies: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/companies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of companies by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompaniesByUser: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/companies/user";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CompaniesApi - functional programming interface
 * @export
 */
exports.CompaniesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CompaniesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add new company
         * @param {XAdminCompany} xAdminCompany
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCompany: function (xAdminCompany, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addCompany(xAdminCompany, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete existing company
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCompany(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit existing company
         * @param {string} id
         * @param {XAdminCompany} xAdminCompany
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCompany: function (id, xAdminCompany, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editCompany(id, xAdminCompany, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific company
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCompany(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanies: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listCompanies(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of companies by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompaniesByUser: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listCompaniesByUser(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * CompaniesApi - factory interface
 * @export
 */
exports.CompaniesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CompaniesApiFp(configuration);
    return {
        /**
         *
         * @summary Add new company
         * @param {XAdminCompany} xAdminCompany
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCompany: function (xAdminCompany, options) {
            return localVarFp.addCompany(xAdminCompany, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete existing company
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany: function (id, options) {
            return localVarFp.deleteCompany(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit existing company
         * @param {string} id
         * @param {XAdminCompany} xAdminCompany
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCompany: function (id, xAdminCompany, options) {
            return localVarFp.editCompany(id, xAdminCompany, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific company
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany: function (id, options) {
            return localVarFp.getCompany(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanies: function (options) {
            return localVarFp.listCompanies(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of companies by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompaniesByUser: function (options) {
            return localVarFp.listCompaniesByUser(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
var CompaniesApi = /** @class */ (function (_super) {
    __extends(CompaniesApi, _super);
    function CompaniesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add new company
     * @param {XAdminCompany} xAdminCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.addCompany = function (xAdminCompany, options) {
        var _this = this;
        return exports.CompaniesApiFp(this.configuration).addCompany(xAdminCompany, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete existing company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.deleteCompany = function (id, options) {
        var _this = this;
        return exports.CompaniesApiFp(this.configuration).deleteCompany(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit existing company
     * @param {string} id
     * @param {XAdminCompany} xAdminCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.editCompany = function (id, xAdminCompany, options) {
        var _this = this;
        return exports.CompaniesApiFp(this.configuration).editCompany(id, xAdminCompany, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.getCompany = function (id, options) {
        var _this = this;
        return exports.CompaniesApiFp(this.configuration).getCompany(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.listCompanies = function (options) {
        var _this = this;
        return exports.CompaniesApiFp(this.configuration).listCompanies(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of companies by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.listCompaniesByUser = function (options) {
        var _this = this;
        return exports.CompaniesApiFp(this.configuration).listCompaniesByUser(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CompaniesApi;
}(base_1.BaseAPI));
exports.CompaniesApi = CompaniesApi;
/**
 * ConfigurationsApi - axios parameter creator
 * @export
 */
exports.ConfigurationsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add new configuration
         * @param {XAdminConfiguration} xAdminConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConfiguration: function (xAdminConfiguration, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminConfiguration' is not null or undefined
                            common_1.assertParamExists('addConfiguration', 'xAdminConfiguration', xAdminConfiguration);
                            localVarPath = "/api/configurations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminConfiguration, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete existing configuration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConfiguration: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteConfiguration', 'id', id);
                            localVarPath = "/api/configurations/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit existing configuration
         * @param {string} id
         * @param {XAdminConfiguration} xAdminConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editConfiguration: function (id, xAdminConfiguration, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editConfiguration', 'id', id);
                            // verify required parameter 'xAdminConfiguration' is not null or undefined
                            common_1.assertParamExists('editConfiguration', 'xAdminConfiguration', xAdminConfiguration);
                            localVarPath = "/api/configurations/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminConfiguration, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific configuration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getConfiguration', 'id', id);
                            localVarPath = "/api/configurations/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConfigurations: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/configurations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ConfigurationsApi - functional programming interface
 * @export
 */
exports.ConfigurationsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ConfigurationsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add new configuration
         * @param {XAdminConfiguration} xAdminConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConfiguration: function (xAdminConfiguration, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addConfiguration(xAdminConfiguration, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete existing configuration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConfiguration: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteConfiguration(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit existing configuration
         * @param {string} id
         * @param {XAdminConfiguration} xAdminConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editConfiguration: function (id, xAdminConfiguration, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editConfiguration(id, xAdminConfiguration, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific configuration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getConfiguration(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConfigurations: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listConfigurations(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ConfigurationsApi - factory interface
 * @export
 */
exports.ConfigurationsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ConfigurationsApiFp(configuration);
    return {
        /**
         *
         * @summary Add new configuration
         * @param {XAdminConfiguration} xAdminConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConfiguration: function (xAdminConfiguration, options) {
            return localVarFp.addConfiguration(xAdminConfiguration, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete existing configuration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConfiguration: function (id, options) {
            return localVarFp.deleteConfiguration(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit existing configuration
         * @param {string} id
         * @param {XAdminConfiguration} xAdminConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editConfiguration: function (id, xAdminConfiguration, options) {
            return localVarFp.editConfiguration(id, xAdminConfiguration, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific configuration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration: function (id, options) {
            return localVarFp.getConfiguration(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConfigurations: function (options) {
            return localVarFp.listConfigurations(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ConfigurationsApi - object-oriented interface
 * @export
 * @class ConfigurationsApi
 * @extends {BaseAPI}
 */
var ConfigurationsApi = /** @class */ (function (_super) {
    __extends(ConfigurationsApi, _super);
    function ConfigurationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add new configuration
     * @param {XAdminConfiguration} xAdminConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    ConfigurationsApi.prototype.addConfiguration = function (xAdminConfiguration, options) {
        var _this = this;
        return exports.ConfigurationsApiFp(this.configuration).addConfiguration(xAdminConfiguration, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete existing configuration
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    ConfigurationsApi.prototype.deleteConfiguration = function (id, options) {
        var _this = this;
        return exports.ConfigurationsApiFp(this.configuration).deleteConfiguration(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit existing configuration
     * @param {string} id
     * @param {XAdminConfiguration} xAdminConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    ConfigurationsApi.prototype.editConfiguration = function (id, xAdminConfiguration, options) {
        var _this = this;
        return exports.ConfigurationsApiFp(this.configuration).editConfiguration(id, xAdminConfiguration, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific configuration
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    ConfigurationsApi.prototype.getConfiguration = function (id, options) {
        var _this = this;
        return exports.ConfigurationsApiFp(this.configuration).getConfiguration(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    ConfigurationsApi.prototype.listConfigurations = function (options) {
        var _this = this;
        return exports.ConfigurationsApiFp(this.configuration).listConfigurations(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ConfigurationsApi;
}(base_1.BaseAPI));
exports.ConfigurationsApi = ConfigurationsApi;
/**
 * EngineQuizGameApi - axios parameter creator
 * @export
 */
exports.EngineQuizGameApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Answer specific question of quiz game
         * @param {XAdminQuizEngineDoAnswerInput} xAdminQuizEngineDoAnswerInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doAnswer: function (xAdminQuizEngineDoAnswerInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminQuizEngineDoAnswerInput' is not null or undefined
                            common_1.assertParamExists('doAnswer', 'xAdminQuizEngineDoAnswerInput', xAdminQuizEngineDoAnswerInput);
                            localVarPath = "/api/quiz-game/engine";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminQuizEngineDoAnswerInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of quiz game
         * @param {string} quizCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizGame: function (quizCode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'quizCode' is not null or undefined
                            common_1.assertParamExists('listQuizGame', 'quizCode', quizCode);
                            localVarPath = "/api/quiz-game/engine/{quizCode}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (quizCode !== undefined) {
                                localVarQueryParameter['quizCode'] = quizCode;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EngineQuizGameApi - functional programming interface
 * @export
 */
exports.EngineQuizGameApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EngineQuizGameApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Answer specific question of quiz game
         * @param {XAdminQuizEngineDoAnswerInput} xAdminQuizEngineDoAnswerInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doAnswer: function (xAdminQuizEngineDoAnswerInput, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.doAnswer(xAdminQuizEngineDoAnswerInput, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of quiz game
         * @param {string} quizCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizGame: function (quizCode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listQuizGame(quizCode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * EngineQuizGameApi - factory interface
 * @export
 */
exports.EngineQuizGameApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EngineQuizGameApiFp(configuration);
    return {
        /**
         *
         * @summary Answer specific question of quiz game
         * @param {XAdminQuizEngineDoAnswerInput} xAdminQuizEngineDoAnswerInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doAnswer: function (xAdminQuizEngineDoAnswerInput, options) {
            return localVarFp.doAnswer(xAdminQuizEngineDoAnswerInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of quiz game
         * @param {string} quizCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizGame: function (quizCode, options) {
            return localVarFp.listQuizGame(quizCode, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EngineQuizGameApi - object-oriented interface
 * @export
 * @class EngineQuizGameApi
 * @extends {BaseAPI}
 */
var EngineQuizGameApi = /** @class */ (function (_super) {
    __extends(EngineQuizGameApi, _super);
    function EngineQuizGameApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Answer specific question of quiz game
     * @param {XAdminQuizEngineDoAnswerInput} xAdminQuizEngineDoAnswerInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineQuizGameApi
     */
    EngineQuizGameApi.prototype.doAnswer = function (xAdminQuizEngineDoAnswerInput, options) {
        var _this = this;
        return exports.EngineQuizGameApiFp(this.configuration).doAnswer(xAdminQuizEngineDoAnswerInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of quiz game
     * @param {string} quizCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineQuizGameApi
     */
    EngineQuizGameApi.prototype.listQuizGame = function (quizCode, options) {
        var _this = this;
        return exports.EngineQuizGameApiFp(this.configuration).listQuizGame(quizCode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EngineQuizGameApi;
}(base_1.BaseAPI));
exports.EngineQuizGameApi = EngineQuizGameApi;
/**
 * EntitiesApi - axios parameter creator
 * @export
 */
exports.EntitiesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add new entity
         * @param {XAdminEntity} xAdminEntity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntity: function (xAdminEntity, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminEntity' is not null or undefined
                            common_1.assertParamExists('addEntity', 'xAdminEntity', xAdminEntity);
                            localVarPath = "/api/entities";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminEntity, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete existing entity
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntity: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteEntity', 'id', id);
                            localVarPath = "/api/entities/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit existing entity
         * @param {string} id
         * @param {XAdminEntity} xAdminEntity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEntity: function (id, xAdminEntity, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editEntity', 'id', id);
                            // verify required parameter 'xAdminEntity' is not null or undefined
                            common_1.assertParamExists('editEntity', 'xAdminEntity', xAdminEntity);
                            localVarPath = "/api/entities/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminEntity, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific entity
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getEntity', 'id', id);
                            localVarPath = "/api/entities/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get model data for specific entity
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelDataEntity: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getModelDataEntity', 'id', id);
                            localVarPath = "/api/entities/model-data/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEntities: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/entities";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EntitiesApi - functional programming interface
 * @export
 */
exports.EntitiesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EntitiesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add new entity
         * @param {XAdminEntity} xAdminEntity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntity: function (xAdminEntity, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addEntity(xAdminEntity, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete existing entity
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntity: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntity(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit existing entity
         * @param {string} id
         * @param {XAdminEntity} xAdminEntity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEntity: function (id, xAdminEntity, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editEntity(id, xAdminEntity, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific entity
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntity(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get model data for specific entity
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelDataEntity: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getModelDataEntity(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEntities: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listEntities(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * EntitiesApi - factory interface
 * @export
 */
exports.EntitiesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EntitiesApiFp(configuration);
    return {
        /**
         *
         * @summary Add new entity
         * @param {XAdminEntity} xAdminEntity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntity: function (xAdminEntity, options) {
            return localVarFp.addEntity(xAdminEntity, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete existing entity
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntity: function (id, options) {
            return localVarFp.deleteEntity(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit existing entity
         * @param {string} id
         * @param {XAdminEntity} xAdminEntity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEntity: function (id, xAdminEntity, options) {
            return localVarFp.editEntity(id, xAdminEntity, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific entity
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity: function (id, options) {
            return localVarFp.getEntity(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get model data for specific entity
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelDataEntity: function (id, options) {
            return localVarFp.getModelDataEntity(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEntities: function (options) {
            return localVarFp.listEntities(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EntitiesApi - object-oriented interface
 * @export
 * @class EntitiesApi
 * @extends {BaseAPI}
 */
var EntitiesApi = /** @class */ (function (_super) {
    __extends(EntitiesApi, _super);
    function EntitiesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add new entity
     * @param {XAdminEntity} xAdminEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.addEntity = function (xAdminEntity, options) {
        var _this = this;
        return exports.EntitiesApiFp(this.configuration).addEntity(xAdminEntity, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete existing entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntity = function (id, options) {
        var _this = this;
        return exports.EntitiesApiFp(this.configuration).deleteEntity(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit existing entity
     * @param {string} id
     * @param {XAdminEntity} xAdminEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.editEntity = function (id, xAdminEntity, options) {
        var _this = this;
        return exports.EntitiesApiFp(this.configuration).editEntity(id, xAdminEntity, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntity = function (id, options) {
        var _this = this;
        return exports.EntitiesApiFp(this.configuration).getEntity(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get model data for specific entity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getModelDataEntity = function (id, options) {
        var _this = this;
        return exports.EntitiesApiFp(this.configuration).getModelDataEntity(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.listEntities = function (options) {
        var _this = this;
        return exports.EntitiesApiFp(this.configuration).listEntities(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EntitiesApi;
}(base_1.BaseAPI));
exports.EntitiesApi = EntitiesApi;
/**
 * EntitiesRecordsApi - axios parameter creator
 * @export
 */
exports.EntitiesRecordsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add new entity record
         * @param {XAdminEntityRecord} xAdminEntityRecord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntityRecord: function (xAdminEntityRecord, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminEntityRecord' is not null or undefined
                            common_1.assertParamExists('addEntityRecord', 'xAdminEntityRecord', xAdminEntityRecord);
                            localVarPath = "/api/entities-records";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminEntityRecord, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete existing entity record
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityRecord: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteEntityRecord', 'id', id);
                            localVarPath = "/api/entities-records/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit existing entity record
         * @param {string} id
         * @param {XAdminEntityRecord} xAdminEntityRecord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEntityRecord: function (id, xAdminEntityRecord, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editEntityRecord', 'id', id);
                            // verify required parameter 'xAdminEntityRecord' is not null or undefined
                            common_1.assertParamExists('editEntityRecord', 'xAdminEntityRecord', xAdminEntityRecord);
                            localVarPath = "/api/entities-records/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminEntityRecord, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific entity record
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityRecord: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getEntityRecord', 'id', id);
                            localVarPath = "/api/entities-records/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of entity records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEntityRecords: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/entities-records";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EntitiesRecordsApi - functional programming interface
 * @export
 */
exports.EntitiesRecordsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EntitiesRecordsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add new entity record
         * @param {XAdminEntityRecord} xAdminEntityRecord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntityRecord: function (xAdminEntityRecord, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addEntityRecord(xAdminEntityRecord, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete existing entity record
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityRecord: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityRecord(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit existing entity record
         * @param {string} id
         * @param {XAdminEntityRecord} xAdminEntityRecord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEntityRecord: function (id, xAdminEntityRecord, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editEntityRecord(id, xAdminEntityRecord, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific entity record
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityRecord: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityRecord(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of entity records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEntityRecords: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listEntityRecords(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * EntitiesRecordsApi - factory interface
 * @export
 */
exports.EntitiesRecordsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EntitiesRecordsApiFp(configuration);
    return {
        /**
         *
         * @summary Add new entity record
         * @param {XAdminEntityRecord} xAdminEntityRecord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntityRecord: function (xAdminEntityRecord, options) {
            return localVarFp.addEntityRecord(xAdminEntityRecord, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete existing entity record
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityRecord: function (id, options) {
            return localVarFp.deleteEntityRecord(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit existing entity record
         * @param {string} id
         * @param {XAdminEntityRecord} xAdminEntityRecord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEntityRecord: function (id, xAdminEntityRecord, options) {
            return localVarFp.editEntityRecord(id, xAdminEntityRecord, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific entity record
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityRecord: function (id, options) {
            return localVarFp.getEntityRecord(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of entity records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEntityRecords: function (options) {
            return localVarFp.listEntityRecords(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EntitiesRecordsApi - object-oriented interface
 * @export
 * @class EntitiesRecordsApi
 * @extends {BaseAPI}
 */
var EntitiesRecordsApi = /** @class */ (function (_super) {
    __extends(EntitiesRecordsApi, _super);
    function EntitiesRecordsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add new entity record
     * @param {XAdminEntityRecord} xAdminEntityRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesRecordsApi
     */
    EntitiesRecordsApi.prototype.addEntityRecord = function (xAdminEntityRecord, options) {
        var _this = this;
        return exports.EntitiesRecordsApiFp(this.configuration).addEntityRecord(xAdminEntityRecord, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete existing entity record
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesRecordsApi
     */
    EntitiesRecordsApi.prototype.deleteEntityRecord = function (id, options) {
        var _this = this;
        return exports.EntitiesRecordsApiFp(this.configuration).deleteEntityRecord(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit existing entity record
     * @param {string} id
     * @param {XAdminEntityRecord} xAdminEntityRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesRecordsApi
     */
    EntitiesRecordsApi.prototype.editEntityRecord = function (id, xAdminEntityRecord, options) {
        var _this = this;
        return exports.EntitiesRecordsApiFp(this.configuration).editEntityRecord(id, xAdminEntityRecord, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific entity record
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesRecordsApi
     */
    EntitiesRecordsApi.prototype.getEntityRecord = function (id, options) {
        var _this = this;
        return exports.EntitiesRecordsApiFp(this.configuration).getEntityRecord(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of entity records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesRecordsApi
     */
    EntitiesRecordsApi.prototype.listEntityRecords = function (options) {
        var _this = this;
        return exports.EntitiesRecordsApiFp(this.configuration).listEntityRecords(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EntitiesRecordsApi;
}(base_1.BaseAPI));
exports.EntitiesRecordsApi = EntitiesRecordsApi;
/**
 * FieldsApi - axios parameter creator
 * @export
 */
exports.FieldsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add field
         * @param {XAdminField} xAdminField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addField: function (xAdminField, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminField' is not null or undefined
                            common_1.assertParamExists('addField', 'xAdminField', xAdminField);
                            localVarPath = "/api/fields";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminField, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete field
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteField: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteField', 'id', id);
                            localVarPath = "/api/fields/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit field
         * @param {string} id
         * @param {XAdminField} xAdminField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editField: function (id, xAdminField, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editField', 'id', id);
                            // verify required parameter 'xAdminField' is not null or undefined
                            common_1.assertParamExists('editField', 'xAdminField', xAdminField);
                            localVarPath = "/api/fields/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminField, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific field
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getField: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getField', 'id', id);
                            localVarPath = "/api/fields/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFields: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/fields";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * FieldsApi - functional programming interface
 * @export
 */
exports.FieldsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.FieldsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add field
         * @param {XAdminField} xAdminField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addField: function (xAdminField, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addField(xAdminField, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete field
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteField: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteField(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit field
         * @param {string} id
         * @param {XAdminField} xAdminField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editField: function (id, xAdminField, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editField(id, xAdminField, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific field
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getField: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getField(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFields: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listFields(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * FieldsApi - factory interface
 * @export
 */
exports.FieldsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.FieldsApiFp(configuration);
    return {
        /**
         *
         * @summary Add field
         * @param {XAdminField} xAdminField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addField: function (xAdminField, options) {
            return localVarFp.addField(xAdminField, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete field
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteField: function (id, options) {
            return localVarFp.deleteField(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit field
         * @param {string} id
         * @param {XAdminField} xAdminField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editField: function (id, xAdminField, options) {
            return localVarFp.editField(id, xAdminField, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific field
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getField: function (id, options) {
            return localVarFp.getField(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFields: function (options) {
            return localVarFp.listFields(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * FieldsApi - object-oriented interface
 * @export
 * @class FieldsApi
 * @extends {BaseAPI}
 */
var FieldsApi = /** @class */ (function (_super) {
    __extends(FieldsApi, _super);
    function FieldsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add field
     * @param {XAdminField} xAdminField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    FieldsApi.prototype.addField = function (xAdminField, options) {
        var _this = this;
        return exports.FieldsApiFp(this.configuration).addField(xAdminField, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete field
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    FieldsApi.prototype.deleteField = function (id, options) {
        var _this = this;
        return exports.FieldsApiFp(this.configuration).deleteField(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit field
     * @param {string} id
     * @param {XAdminField} xAdminField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    FieldsApi.prototype.editField = function (id, xAdminField, options) {
        var _this = this;
        return exports.FieldsApiFp(this.configuration).editField(id, xAdminField, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific field
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    FieldsApi.prototype.getField = function (id, options) {
        var _this = this;
        return exports.FieldsApiFp(this.configuration).getField(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    FieldsApi.prototype.listFields = function (options) {
        var _this = this;
        return exports.FieldsApiFp(this.configuration).listFields(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FieldsApi;
}(base_1.BaseAPI));
exports.FieldsApi = FieldsApi;
/**
 * FunctionalitiesApi - axios parameter creator
 * @export
 */
exports.FunctionalitiesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add functionality
         * @param {XAdminFunctionality} xAdminFunctionality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFunctionality: function (xAdminFunctionality, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminFunctionality' is not null or undefined
                            common_1.assertParamExists('addFunctionality', 'xAdminFunctionality', xAdminFunctionality);
                            localVarPath = "/api/functionalities";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminFunctionality, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete functionality
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunctionality: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteFunctionality', 'id', id);
                            localVarPath = "/api/functionalities/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit functionality
         * @param {string} id
         * @param {XAdminFunctionality} xAdminFunctionality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editFunctionality: function (id, xAdminFunctionality, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editFunctionality', 'id', id);
                            // verify required parameter 'xAdminFunctionality' is not null or undefined
                            common_1.assertParamExists('editFunctionality', 'xAdminFunctionality', xAdminFunctionality);
                            localVarPath = "/api/functionalities/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminFunctionality, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific functionality
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunctionality: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getFunctionality', 'id', id);
                            localVarPath = "/api/functionalities/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of functionalities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFunctionalities: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/functionalities";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * FunctionalitiesApi - functional programming interface
 * @export
 */
exports.FunctionalitiesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.FunctionalitiesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add functionality
         * @param {XAdminFunctionality} xAdminFunctionality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFunctionality: function (xAdminFunctionality, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addFunctionality(xAdminFunctionality, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete functionality
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunctionality: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteFunctionality(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit functionality
         * @param {string} id
         * @param {XAdminFunctionality} xAdminFunctionality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editFunctionality: function (id, xAdminFunctionality, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editFunctionality(id, xAdminFunctionality, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific functionality
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunctionality: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFunctionality(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of functionalities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFunctionalities: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listFunctionalities(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * FunctionalitiesApi - factory interface
 * @export
 */
exports.FunctionalitiesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.FunctionalitiesApiFp(configuration);
    return {
        /**
         *
         * @summary Add functionality
         * @param {XAdminFunctionality} xAdminFunctionality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFunctionality: function (xAdminFunctionality, options) {
            return localVarFp.addFunctionality(xAdminFunctionality, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete functionality
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunctionality: function (id, options) {
            return localVarFp.deleteFunctionality(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit functionality
         * @param {string} id
         * @param {XAdminFunctionality} xAdminFunctionality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editFunctionality: function (id, xAdminFunctionality, options) {
            return localVarFp.editFunctionality(id, xAdminFunctionality, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific functionality
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunctionality: function (id, options) {
            return localVarFp.getFunctionality(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of functionalities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFunctionalities: function (options) {
            return localVarFp.listFunctionalities(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * FunctionalitiesApi - object-oriented interface
 * @export
 * @class FunctionalitiesApi
 * @extends {BaseAPI}
 */
var FunctionalitiesApi = /** @class */ (function (_super) {
    __extends(FunctionalitiesApi, _super);
    function FunctionalitiesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add functionality
     * @param {XAdminFunctionality} xAdminFunctionality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionalitiesApi
     */
    FunctionalitiesApi.prototype.addFunctionality = function (xAdminFunctionality, options) {
        var _this = this;
        return exports.FunctionalitiesApiFp(this.configuration).addFunctionality(xAdminFunctionality, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete functionality
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionalitiesApi
     */
    FunctionalitiesApi.prototype.deleteFunctionality = function (id, options) {
        var _this = this;
        return exports.FunctionalitiesApiFp(this.configuration).deleteFunctionality(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit functionality
     * @param {string} id
     * @param {XAdminFunctionality} xAdminFunctionality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionalitiesApi
     */
    FunctionalitiesApi.prototype.editFunctionality = function (id, xAdminFunctionality, options) {
        var _this = this;
        return exports.FunctionalitiesApiFp(this.configuration).editFunctionality(id, xAdminFunctionality, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific functionality
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionalitiesApi
     */
    FunctionalitiesApi.prototype.getFunctionality = function (id, options) {
        var _this = this;
        return exports.FunctionalitiesApiFp(this.configuration).getFunctionality(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of functionalities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionalitiesApi
     */
    FunctionalitiesApi.prototype.listFunctionalities = function (options) {
        var _this = this;
        return exports.FunctionalitiesApiFp(this.configuration).listFunctionalities(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FunctionalitiesApi;
}(base_1.BaseAPI));
exports.FunctionalitiesApi = FunctionalitiesApi;
/**
 * MenusApi - axios parameter creator
 * @export
 */
exports.MenusApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add menu
         * @param {XAdminMenu} xAdminMenu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMenu: function (xAdminMenu, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminMenu' is not null or undefined
                            common_1.assertParamExists('addMenu', 'xAdminMenu', xAdminMenu);
                            localVarPath = "/api/menus";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminMenu, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete menu
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteMenu', 'id', id);
                            localVarPath = "/api/menus/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit menu
         * @param {string} id
         * @param {XAdminMenu} xAdminMenu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMenu: function (id, xAdminMenu, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editMenu', 'id', id);
                            // verify required parameter 'xAdminMenu' is not null or undefined
                            common_1.assertParamExists('editMenu', 'xAdminMenu', xAdminMenu);
                            localVarPath = "/api/menus/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminMenu, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific menu
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenu: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getMenu', 'id', id);
                            localVarPath = "/api/menus/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMenus: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/menus";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * MenusApi - functional programming interface
 * @export
 */
exports.MenusApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.MenusApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add menu
         * @param {XAdminMenu} xAdminMenu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMenu: function (xAdminMenu, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addMenu(xAdminMenu, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete menu
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteMenu(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit menu
         * @param {string} id
         * @param {XAdminMenu} xAdminMenu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMenu: function (id, xAdminMenu, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editMenu(id, xAdminMenu, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific menu
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenu: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMenu(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMenus: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listMenus(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * MenusApi - factory interface
 * @export
 */
exports.MenusApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.MenusApiFp(configuration);
    return {
        /**
         *
         * @summary Add menu
         * @param {XAdminMenu} xAdminMenu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMenu: function (xAdminMenu, options) {
            return localVarFp.addMenu(xAdminMenu, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete menu
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu: function (id, options) {
            return localVarFp.deleteMenu(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit menu
         * @param {string} id
         * @param {XAdminMenu} xAdminMenu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMenu: function (id, xAdminMenu, options) {
            return localVarFp.editMenu(id, xAdminMenu, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific menu
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenu: function (id, options) {
            return localVarFp.getMenu(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMenus: function (options) {
            return localVarFp.listMenus(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * MenusApi - object-oriented interface
 * @export
 * @class MenusApi
 * @extends {BaseAPI}
 */
var MenusApi = /** @class */ (function (_super) {
    __extends(MenusApi, _super);
    function MenusApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add menu
     * @param {XAdminMenu} xAdminMenu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    MenusApi.prototype.addMenu = function (xAdminMenu, options) {
        var _this = this;
        return exports.MenusApiFp(this.configuration).addMenu(xAdminMenu, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete menu
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    MenusApi.prototype.deleteMenu = function (id, options) {
        var _this = this;
        return exports.MenusApiFp(this.configuration).deleteMenu(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit menu
     * @param {string} id
     * @param {XAdminMenu} xAdminMenu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    MenusApi.prototype.editMenu = function (id, xAdminMenu, options) {
        var _this = this;
        return exports.MenusApiFp(this.configuration).editMenu(id, xAdminMenu, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific menu
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    MenusApi.prototype.getMenu = function (id, options) {
        var _this = this;
        return exports.MenusApiFp(this.configuration).getMenu(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    MenusApi.prototype.listMenus = function (options) {
        var _this = this;
        return exports.MenusApiFp(this.configuration).listMenus(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MenusApi;
}(base_1.BaseAPI));
exports.MenusApi = MenusApi;
/**
 * ModesApi - axios parameter creator
 * @export
 */
exports.ModesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add mode
         * @param {XAdminMode} xAdminMode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMode: function (xAdminMode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminMode' is not null or undefined
                            common_1.assertParamExists('addMode', 'xAdminMode', xAdminMode);
                            localVarPath = "/api/modes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminMode, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete mode
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMode: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteMode', 'id', id);
                            localVarPath = "/api/modes/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit mode
         * @param {string} id
         * @param {XAdminMode} xAdminMode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMode: function (id, xAdminMode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editMode', 'id', id);
                            // verify required parameter 'xAdminMode' is not null or undefined
                            common_1.assertParamExists('editMode', 'xAdminMode', xAdminMode);
                            localVarPath = "/api/modes/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminMode, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific mode
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMode: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getMode', 'id', id);
                            localVarPath = "/api/modes/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of modes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModes: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/modes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ModesApi - functional programming interface
 * @export
 */
exports.ModesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ModesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add mode
         * @param {XAdminMode} xAdminMode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMode: function (xAdminMode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addMode(xAdminMode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete mode
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMode: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteMode(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit mode
         * @param {string} id
         * @param {XAdminMode} xAdminMode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMode: function (id, xAdminMode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editMode(id, xAdminMode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific mode
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMode: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMode(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of modes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModes: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listModes(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ModesApi - factory interface
 * @export
 */
exports.ModesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ModesApiFp(configuration);
    return {
        /**
         *
         * @summary Add mode
         * @param {XAdminMode} xAdminMode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMode: function (xAdminMode, options) {
            return localVarFp.addMode(xAdminMode, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete mode
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMode: function (id, options) {
            return localVarFp.deleteMode(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit mode
         * @param {string} id
         * @param {XAdminMode} xAdminMode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMode: function (id, xAdminMode, options) {
            return localVarFp.editMode(id, xAdminMode, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific mode
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMode: function (id, options) {
            return localVarFp.getMode(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of modes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModes: function (options) {
            return localVarFp.listModes(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ModesApi - object-oriented interface
 * @export
 * @class ModesApi
 * @extends {BaseAPI}
 */
var ModesApi = /** @class */ (function (_super) {
    __extends(ModesApi, _super);
    function ModesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add mode
     * @param {XAdminMode} xAdminMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModesApi
     */
    ModesApi.prototype.addMode = function (xAdminMode, options) {
        var _this = this;
        return exports.ModesApiFp(this.configuration).addMode(xAdminMode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete mode
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModesApi
     */
    ModesApi.prototype.deleteMode = function (id, options) {
        var _this = this;
        return exports.ModesApiFp(this.configuration).deleteMode(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit mode
     * @param {string} id
     * @param {XAdminMode} xAdminMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModesApi
     */
    ModesApi.prototype.editMode = function (id, xAdminMode, options) {
        var _this = this;
        return exports.ModesApiFp(this.configuration).editMode(id, xAdminMode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific mode
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModesApi
     */
    ModesApi.prototype.getMode = function (id, options) {
        var _this = this;
        return exports.ModesApiFp(this.configuration).getMode(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of modes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModesApi
     */
    ModesApi.prototype.listModes = function (options) {
        var _this = this;
        return exports.ModesApiFp(this.configuration).listModes(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ModesApi;
}(base_1.BaseAPI));
exports.ModesApi = ModesApi;
/**
 * NewsApi - axios parameter creator
 * @export
 */
exports.NewsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add new
         * @param {XAdminNewEntity} xAdminNewEntity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNew: function (xAdminNewEntity, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminNewEntity' is not null or undefined
                            common_1.assertParamExists('addNew', 'xAdminNewEntity', xAdminNewEntity);
                            localVarPath = "/api/news";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminNewEntity, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete new
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNew: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteNew', 'id', id);
                            localVarPath = "/api/news/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit new
         * @param {string} id
         * @param {XAdminNewEntity} xAdminNewEntity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editNew: function (id, xAdminNewEntity, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editNew', 'id', id);
                            // verify required parameter 'xAdminNewEntity' is not null or undefined
                            common_1.assertParamExists('editNew', 'xAdminNewEntity', xAdminNewEntity);
                            localVarPath = "/api/news/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminNewEntity, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific new
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNew: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    common_1.assertParamExists('getNew', 'id', id);
                    localVarPath = "/api/news/{id}";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (id !== undefined) {
                        localVarQueryParameter['id'] = id;
                    }
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary List of news
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNews: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/news";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * NewsApi - functional programming interface
 * @export
 */
exports.NewsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.NewsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add new
         * @param {XAdminNewEntity} xAdminNewEntity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNew: function (xAdminNewEntity, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addNew(xAdminNewEntity, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete new
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNew: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteNew(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit new
         * @param {string} id
         * @param {XAdminNewEntity} xAdminNewEntity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editNew: function (id, xAdminNewEntity, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editNew(id, xAdminNewEntity, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific new
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNew: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNew(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of news
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNews: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listNews(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * NewsApi - factory interface
 * @export
 */
exports.NewsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.NewsApiFp(configuration);
    return {
        /**
         *
         * @summary Add new
         * @param {XAdminNewEntity} xAdminNewEntity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNew: function (xAdminNewEntity, options) {
            return localVarFp.addNew(xAdminNewEntity, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete new
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNew: function (id, options) {
            return localVarFp.deleteNew(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit new
         * @param {string} id
         * @param {XAdminNewEntity} xAdminNewEntity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editNew: function (id, xAdminNewEntity, options) {
            return localVarFp.editNew(id, xAdminNewEntity, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific new
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNew: function (id, options) {
            return localVarFp.getNew(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of news
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNews: function (options) {
            return localVarFp.listNews(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * NewsApi - object-oriented interface
 * @export
 * @class NewsApi
 * @extends {BaseAPI}
 */
var NewsApi = /** @class */ (function (_super) {
    __extends(NewsApi, _super);
    function NewsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add new
     * @param {XAdminNewEntity} xAdminNewEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    NewsApi.prototype.addNew = function (xAdminNewEntity, options) {
        var _this = this;
        return exports.NewsApiFp(this.configuration).addNew(xAdminNewEntity, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete new
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    NewsApi.prototype.deleteNew = function (id, options) {
        var _this = this;
        return exports.NewsApiFp(this.configuration).deleteNew(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit new
     * @param {string} id
     * @param {XAdminNewEntity} xAdminNewEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    NewsApi.prototype.editNew = function (id, xAdminNewEntity, options) {
        var _this = this;
        return exports.NewsApiFp(this.configuration).editNew(id, xAdminNewEntity, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific new
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    NewsApi.prototype.getNew = function (id, options) {
        var _this = this;
        return exports.NewsApiFp(this.configuration).getNew(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of news
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    NewsApi.prototype.listNews = function (options) {
        var _this = this;
        return exports.NewsApiFp(this.configuration).listNews(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NewsApi;
}(base_1.BaseAPI));
exports.NewsApi = NewsApi;
/**
 * PermissionsApi - axios parameter creator
 * @export
 */
exports.PermissionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add permission
         * @param {XAdminPermission} xAdminPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPermission: function (xAdminPermission, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminPermission' is not null or undefined
                            common_1.assertParamExists('addPermission', 'xAdminPermission', xAdminPermission);
                            localVarPath = "/api/permissions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminPermission, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete permission
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermission: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deletePermission', 'id', id);
                            localVarPath = "/api/permissions/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit permission
         * @param {string} id
         * @param {XAdminPermission} xAdminPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPermission: function (id, xAdminPermission, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editPermission', 'id', id);
                            // verify required parameter 'xAdminPermission' is not null or undefined
                            common_1.assertParamExists('editPermission', 'xAdminPermission', xAdminPermission);
                            localVarPath = "/api/permissions/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminPermission, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific permission
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermission: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getPermission', 'id', id);
                            localVarPath = "/api/permissions/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/permissions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of permissions by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissionsByUser: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/permissions/user";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * PermissionsApi - functional programming interface
 * @export
 */
exports.PermissionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.PermissionsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add permission
         * @param {XAdminPermission} xAdminPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPermission: function (xAdminPermission, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addPermission(xAdminPermission, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete permission
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermission: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePermission(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit permission
         * @param {string} id
         * @param {XAdminPermission} xAdminPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPermission: function (id, xAdminPermission, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editPermission(id, xAdminPermission, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific permission
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermission: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPermission(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPermissions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of permissions by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissionsByUser: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPermissionsByUser(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * PermissionsApi - factory interface
 * @export
 */
exports.PermissionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.PermissionsApiFp(configuration);
    return {
        /**
         *
         * @summary Add permission
         * @param {XAdminPermission} xAdminPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPermission: function (xAdminPermission, options) {
            return localVarFp.addPermission(xAdminPermission, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete permission
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermission: function (id, options) {
            return localVarFp.deletePermission(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit permission
         * @param {string} id
         * @param {XAdminPermission} xAdminPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPermission: function (id, xAdminPermission, options) {
            return localVarFp.editPermission(id, xAdminPermission, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific permission
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermission: function (id, options) {
            return localVarFp.getPermission(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissions: function (options) {
            return localVarFp.listPermissions(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of permissions by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissionsByUser: function (options) {
            return localVarFp.listPermissionsByUser(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
var PermissionsApi = /** @class */ (function (_super) {
    __extends(PermissionsApi, _super);
    function PermissionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add permission
     * @param {XAdminPermission} xAdminPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    PermissionsApi.prototype.addPermission = function (xAdminPermission, options) {
        var _this = this;
        return exports.PermissionsApiFp(this.configuration).addPermission(xAdminPermission, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    PermissionsApi.prototype.deletePermission = function (id, options) {
        var _this = this;
        return exports.PermissionsApiFp(this.configuration).deletePermission(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit permission
     * @param {string} id
     * @param {XAdminPermission} xAdminPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    PermissionsApi.prototype.editPermission = function (id, xAdminPermission, options) {
        var _this = this;
        return exports.PermissionsApiFp(this.configuration).editPermission(id, xAdminPermission, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    PermissionsApi.prototype.getPermission = function (id, options) {
        var _this = this;
        return exports.PermissionsApiFp(this.configuration).getPermission(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    PermissionsApi.prototype.listPermissions = function (options) {
        var _this = this;
        return exports.PermissionsApiFp(this.configuration).listPermissions(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of permissions by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    PermissionsApi.prototype.listPermissionsByUser = function (options) {
        var _this = this;
        return exports.PermissionsApiFp(this.configuration).listPermissionsByUser(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PermissionsApi;
}(base_1.BaseAPI));
exports.PermissionsApi = PermissionsApi;
/**
 * QuestionsAnswersQuizGameApi - axios parameter creator
 * @export
 */
exports.QuestionsAnswersQuizGameApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add quiz question answers
         * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuizQuestionAnswer: function (xAdminQuizQuestionAnswer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminQuizQuestionAnswer' is not null or undefined
                            common_1.assertParamExists('addQuizQuestionAnswer', 'xAdminQuizQuestionAnswer', xAdminQuizQuestionAnswer);
                            localVarPath = "/api/quiz-game/questions-answers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminQuizQuestionAnswer, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete quiz question answers
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuizQuestionAnswer: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteQuizQuestionAnswer', 'id', id);
                            localVarPath = "/api/quiz-game/questions-answers/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit quiz question answers
         * @param {string} id
         * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editQuizQuestionAnswer: function (id, xAdminQuizQuestionAnswer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editQuizQuestionAnswer', 'id', id);
                            // verify required parameter 'xAdminQuizQuestionAnswer' is not null or undefined
                            common_1.assertParamExists('editQuizQuestionAnswer', 'xAdminQuizQuestionAnswer', xAdminQuizQuestionAnswer);
                            localVarPath = "/api/quiz-game/questions-answers/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminQuizQuestionAnswer, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific quiz question answers
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizQuestionAnswer: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getQuizQuestionAnswer', 'id', id);
                            localVarPath = "/api/quiz-game/questions-answers/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of quiz question answers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizQuestionAnswers: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/quiz-game/questions-answers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * QuestionsAnswersQuizGameApi - functional programming interface
 * @export
 */
exports.QuestionsAnswersQuizGameApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.QuestionsAnswersQuizGameApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add quiz question answers
         * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuizQuestionAnswer: function (xAdminQuizQuestionAnswer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addQuizQuestionAnswer(xAdminQuizQuestionAnswer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete quiz question answers
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuizQuestionAnswer: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteQuizQuestionAnswer(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit quiz question answers
         * @param {string} id
         * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editQuizQuestionAnswer: function (id, xAdminQuizQuestionAnswer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editQuizQuestionAnswer(id, xAdminQuizQuestionAnswer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific quiz question answers
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizQuestionAnswer: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getQuizQuestionAnswer(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of quiz question answers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizQuestionAnswers: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listQuizQuestionAnswers(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * QuestionsAnswersQuizGameApi - factory interface
 * @export
 */
exports.QuestionsAnswersQuizGameApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.QuestionsAnswersQuizGameApiFp(configuration);
    return {
        /**
         *
         * @summary Add quiz question answers
         * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuizQuestionAnswer: function (xAdminQuizQuestionAnswer, options) {
            return localVarFp.addQuizQuestionAnswer(xAdminQuizQuestionAnswer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete quiz question answers
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuizQuestionAnswer: function (id, options) {
            return localVarFp.deleteQuizQuestionAnswer(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit quiz question answers
         * @param {string} id
         * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editQuizQuestionAnswer: function (id, xAdminQuizQuestionAnswer, options) {
            return localVarFp.editQuizQuestionAnswer(id, xAdminQuizQuestionAnswer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific quiz question answers
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizQuestionAnswer: function (id, options) {
            return localVarFp.getQuizQuestionAnswer(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of quiz question answers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizQuestionAnswers: function (options) {
            return localVarFp.listQuizQuestionAnswers(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * QuestionsAnswersQuizGameApi - object-oriented interface
 * @export
 * @class QuestionsAnswersQuizGameApi
 * @extends {BaseAPI}
 */
var QuestionsAnswersQuizGameApi = /** @class */ (function (_super) {
    __extends(QuestionsAnswersQuizGameApi, _super);
    function QuestionsAnswersQuizGameApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add quiz question answers
     * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsAnswersQuizGameApi
     */
    QuestionsAnswersQuizGameApi.prototype.addQuizQuestionAnswer = function (xAdminQuizQuestionAnswer, options) {
        var _this = this;
        return exports.QuestionsAnswersQuizGameApiFp(this.configuration).addQuizQuestionAnswer(xAdminQuizQuestionAnswer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete quiz question answers
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsAnswersQuizGameApi
     */
    QuestionsAnswersQuizGameApi.prototype.deleteQuizQuestionAnswer = function (id, options) {
        var _this = this;
        return exports.QuestionsAnswersQuizGameApiFp(this.configuration).deleteQuizQuestionAnswer(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit quiz question answers
     * @param {string} id
     * @param {XAdminQuizQuestionAnswer} xAdminQuizQuestionAnswer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsAnswersQuizGameApi
     */
    QuestionsAnswersQuizGameApi.prototype.editQuizQuestionAnswer = function (id, xAdminQuizQuestionAnswer, options) {
        var _this = this;
        return exports.QuestionsAnswersQuizGameApiFp(this.configuration).editQuizQuestionAnswer(id, xAdminQuizQuestionAnswer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific quiz question answers
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsAnswersQuizGameApi
     */
    QuestionsAnswersQuizGameApi.prototype.getQuizQuestionAnswer = function (id, options) {
        var _this = this;
        return exports.QuestionsAnswersQuizGameApiFp(this.configuration).getQuizQuestionAnswer(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of quiz question answers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsAnswersQuizGameApi
     */
    QuestionsAnswersQuizGameApi.prototype.listQuizQuestionAnswers = function (options) {
        var _this = this;
        return exports.QuestionsAnswersQuizGameApiFp(this.configuration).listQuizQuestionAnswers(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return QuestionsAnswersQuizGameApi;
}(base_1.BaseAPI));
exports.QuestionsAnswersQuizGameApi = QuestionsAnswersQuizGameApi;
/**
 * QuestionsQuizGameApi - axios parameter creator
 * @export
 */
exports.QuestionsQuizGameApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add quiz question
         * @param {XAdminQuizQuestion} xAdminQuizQuestion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuizQuestion: function (xAdminQuizQuestion, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminQuizQuestion' is not null or undefined
                            common_1.assertParamExists('addQuizQuestion', 'xAdminQuizQuestion', xAdminQuizQuestion);
                            localVarPath = "/api/quiz-game/questions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminQuizQuestion, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete quiz question
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuizQuestion: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteQuizQuestion', 'id', id);
                            localVarPath = "/api/quiz-game/questions/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit quiz question
         * @param {string} id
         * @param {XAdminQuizQuestion} xAdminQuizQuestion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editQuizQuestion: function (id, xAdminQuizQuestion, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editQuizQuestion', 'id', id);
                            // verify required parameter 'xAdminQuizQuestion' is not null or undefined
                            common_1.assertParamExists('editQuizQuestion', 'xAdminQuizQuestion', xAdminQuizQuestion);
                            localVarPath = "/api/quiz-game/questions/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminQuizQuestion, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific quiz question
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizQuestion: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getQuizQuestion', 'id', id);
                            localVarPath = "/api/quiz-game/questions/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of quiz questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizQuestions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/quiz-game/questions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * QuestionsQuizGameApi - functional programming interface
 * @export
 */
exports.QuestionsQuizGameApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.QuestionsQuizGameApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add quiz question
         * @param {XAdminQuizQuestion} xAdminQuizQuestion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuizQuestion: function (xAdminQuizQuestion, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addQuizQuestion(xAdminQuizQuestion, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete quiz question
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuizQuestion: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteQuizQuestion(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit quiz question
         * @param {string} id
         * @param {XAdminQuizQuestion} xAdminQuizQuestion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editQuizQuestion: function (id, xAdminQuizQuestion, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editQuizQuestion(id, xAdminQuizQuestion, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific quiz question
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizQuestion: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getQuizQuestion(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of quiz questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizQuestions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listQuizQuestions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * QuestionsQuizGameApi - factory interface
 * @export
 */
exports.QuestionsQuizGameApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.QuestionsQuizGameApiFp(configuration);
    return {
        /**
         *
         * @summary Add quiz question
         * @param {XAdminQuizQuestion} xAdminQuizQuestion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuizQuestion: function (xAdminQuizQuestion, options) {
            return localVarFp.addQuizQuestion(xAdminQuizQuestion, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete quiz question
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuizQuestion: function (id, options) {
            return localVarFp.deleteQuizQuestion(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit quiz question
         * @param {string} id
         * @param {XAdminQuizQuestion} xAdminQuizQuestion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editQuizQuestion: function (id, xAdminQuizQuestion, options) {
            return localVarFp.editQuizQuestion(id, xAdminQuizQuestion, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific quiz question
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizQuestion: function (id, options) {
            return localVarFp.getQuizQuestion(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of quiz questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizQuestions: function (options) {
            return localVarFp.listQuizQuestions(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * QuestionsQuizGameApi - object-oriented interface
 * @export
 * @class QuestionsQuizGameApi
 * @extends {BaseAPI}
 */
var QuestionsQuizGameApi = /** @class */ (function (_super) {
    __extends(QuestionsQuizGameApi, _super);
    function QuestionsQuizGameApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add quiz question
     * @param {XAdminQuizQuestion} xAdminQuizQuestion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsQuizGameApi
     */
    QuestionsQuizGameApi.prototype.addQuizQuestion = function (xAdminQuizQuestion, options) {
        var _this = this;
        return exports.QuestionsQuizGameApiFp(this.configuration).addQuizQuestion(xAdminQuizQuestion, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete quiz question
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsQuizGameApi
     */
    QuestionsQuizGameApi.prototype.deleteQuizQuestion = function (id, options) {
        var _this = this;
        return exports.QuestionsQuizGameApiFp(this.configuration).deleteQuizQuestion(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit quiz question
     * @param {string} id
     * @param {XAdminQuizQuestion} xAdminQuizQuestion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsQuizGameApi
     */
    QuestionsQuizGameApi.prototype.editQuizQuestion = function (id, xAdminQuizQuestion, options) {
        var _this = this;
        return exports.QuestionsQuizGameApiFp(this.configuration).editQuizQuestion(id, xAdminQuizQuestion, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific quiz question
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsQuizGameApi
     */
    QuestionsQuizGameApi.prototype.getQuizQuestion = function (id, options) {
        var _this = this;
        return exports.QuestionsQuizGameApiFp(this.configuration).getQuizQuestion(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of quiz questions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsQuizGameApi
     */
    QuestionsQuizGameApi.prototype.listQuizQuestions = function (options) {
        var _this = this;
        return exports.QuestionsQuizGameApiFp(this.configuration).listQuizQuestions(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return QuestionsQuizGameApi;
}(base_1.BaseAPI));
exports.QuestionsQuizGameApi = QuestionsQuizGameApi;
/**
 * QuizzesQuizGameApi - axios parameter creator
 * @export
 */
exports.QuizzesQuizGameApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add quiz
         * @param {XAdminQuiz} xAdminQuiz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuiz: function (xAdminQuiz, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminQuiz' is not null or undefined
                            common_1.assertParamExists('addQuiz', 'xAdminQuiz', xAdminQuiz);
                            localVarPath = "/api/quiz-game/quizzes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminQuiz, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete quiz
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuiz: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteQuiz', 'id', id);
                            localVarPath = "/api/quiz-game/quizzes/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit quiz
         * @param {string} id
         * @param {XAdminQuiz} xAdminQuiz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editQuiz: function (id, xAdminQuiz, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editQuiz', 'id', id);
                            // verify required parameter 'xAdminQuiz' is not null or undefined
                            common_1.assertParamExists('editQuiz', 'xAdminQuiz', xAdminQuiz);
                            localVarPath = "/api/quiz-game/quizzes/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminQuiz, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific quiz
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuiz: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getQuiz', 'id', id);
                            localVarPath = "/api/quiz-game/quizzes/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of quizzes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizzes: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/quiz-game/quizzes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * QuizzesQuizGameApi - functional programming interface
 * @export
 */
exports.QuizzesQuizGameApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.QuizzesQuizGameApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add quiz
         * @param {XAdminQuiz} xAdminQuiz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuiz: function (xAdminQuiz, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addQuiz(xAdminQuiz, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete quiz
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuiz: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteQuiz(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit quiz
         * @param {string} id
         * @param {XAdminQuiz} xAdminQuiz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editQuiz: function (id, xAdminQuiz, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editQuiz(id, xAdminQuiz, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific quiz
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuiz: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getQuiz(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of quizzes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizzes: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listQuizzes(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * QuizzesQuizGameApi - factory interface
 * @export
 */
exports.QuizzesQuizGameApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.QuizzesQuizGameApiFp(configuration);
    return {
        /**
         *
         * @summary Add quiz
         * @param {XAdminQuiz} xAdminQuiz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuiz: function (xAdminQuiz, options) {
            return localVarFp.addQuiz(xAdminQuiz, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete quiz
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuiz: function (id, options) {
            return localVarFp.deleteQuiz(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit quiz
         * @param {string} id
         * @param {XAdminQuiz} xAdminQuiz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editQuiz: function (id, xAdminQuiz, options) {
            return localVarFp.editQuiz(id, xAdminQuiz, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific quiz
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuiz: function (id, options) {
            return localVarFp.getQuiz(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of quizzes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizzes: function (options) {
            return localVarFp.listQuizzes(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * QuizzesQuizGameApi - object-oriented interface
 * @export
 * @class QuizzesQuizGameApi
 * @extends {BaseAPI}
 */
var QuizzesQuizGameApi = /** @class */ (function (_super) {
    __extends(QuizzesQuizGameApi, _super);
    function QuizzesQuizGameApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add quiz
     * @param {XAdminQuiz} xAdminQuiz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizzesQuizGameApi
     */
    QuizzesQuizGameApi.prototype.addQuiz = function (xAdminQuiz, options) {
        var _this = this;
        return exports.QuizzesQuizGameApiFp(this.configuration).addQuiz(xAdminQuiz, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete quiz
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizzesQuizGameApi
     */
    QuizzesQuizGameApi.prototype.deleteQuiz = function (id, options) {
        var _this = this;
        return exports.QuizzesQuizGameApiFp(this.configuration).deleteQuiz(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit quiz
     * @param {string} id
     * @param {XAdminQuiz} xAdminQuiz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizzesQuizGameApi
     */
    QuizzesQuizGameApi.prototype.editQuiz = function (id, xAdminQuiz, options) {
        var _this = this;
        return exports.QuizzesQuizGameApiFp(this.configuration).editQuiz(id, xAdminQuiz, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific quiz
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizzesQuizGameApi
     */
    QuizzesQuizGameApi.prototype.getQuiz = function (id, options) {
        var _this = this;
        return exports.QuizzesQuizGameApiFp(this.configuration).getQuiz(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of quizzes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizzesQuizGameApi
     */
    QuizzesQuizGameApi.prototype.listQuizzes = function (options) {
        var _this = this;
        return exports.QuizzesQuizGameApiFp(this.configuration).listQuizzes(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return QuizzesQuizGameApi;
}(base_1.BaseAPI));
exports.QuizzesQuizGameApi = QuizzesQuizGameApi;
/**
 * StoreCategoriesApi - axios parameter creator
 * @export
 */
exports.StoreCategoriesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add store category
         * @param {XAdminStoreCategory} xAdminStoreCategory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreCategory: function (xAdminStoreCategory, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminStoreCategory' is not null or undefined
                            common_1.assertParamExists('addStoreCategory', 'xAdminStoreCategory', xAdminStoreCategory);
                            localVarPath = "/api/store/categories";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminStoreCategory, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete store category
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreCategory: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteStoreCategory', 'id', id);
                            localVarPath = "/api/store/categories/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit store category
         * @param {string} id
         * @param {XAdminStoreCategory} xAdminStoreCategory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoreCategory: function (id, xAdminStoreCategory, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editStoreCategory', 'id', id);
                            // verify required parameter 'xAdminStoreCategory' is not null or undefined
                            common_1.assertParamExists('editStoreCategory', 'xAdminStoreCategory', xAdminStoreCategory);
                            localVarPath = "/api/store/categories/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminStoreCategory, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific store category
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreCategory: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getStoreCategory', 'id', id);
                            localVarPath = "/api/store/categories/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreCategories: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/store/categories";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store categories by Company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreCategoriesByCompany: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/store/categories/company";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * StoreCategoriesApi - functional programming interface
 * @export
 */
exports.StoreCategoriesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.StoreCategoriesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add store category
         * @param {XAdminStoreCategory} xAdminStoreCategory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreCategory: function (xAdminStoreCategory, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addStoreCategory(xAdminStoreCategory, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete store category
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreCategory: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteStoreCategory(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit store category
         * @param {string} id
         * @param {XAdminStoreCategory} xAdminStoreCategory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoreCategory: function (id, xAdminStoreCategory, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editStoreCategory(id, xAdminStoreCategory, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific store category
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreCategory: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStoreCategory(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreCategories: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listStoreCategories(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store categories by Company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreCategoriesByCompany: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listStoreCategoriesByCompany(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * StoreCategoriesApi - factory interface
 * @export
 */
exports.StoreCategoriesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.StoreCategoriesApiFp(configuration);
    return {
        /**
         *
         * @summary Add store category
         * @param {XAdminStoreCategory} xAdminStoreCategory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreCategory: function (xAdminStoreCategory, options) {
            return localVarFp.addStoreCategory(xAdminStoreCategory, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete store category
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreCategory: function (id, options) {
            return localVarFp.deleteStoreCategory(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit store category
         * @param {string} id
         * @param {XAdminStoreCategory} xAdminStoreCategory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoreCategory: function (id, xAdminStoreCategory, options) {
            return localVarFp.editStoreCategory(id, xAdminStoreCategory, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific store category
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreCategory: function (id, options) {
            return localVarFp.getStoreCategory(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of store categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreCategories: function (options) {
            return localVarFp.listStoreCategories(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of store categories by Company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreCategoriesByCompany: function (options) {
            return localVarFp.listStoreCategoriesByCompany(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * StoreCategoriesApi - object-oriented interface
 * @export
 * @class StoreCategoriesApi
 * @extends {BaseAPI}
 */
var StoreCategoriesApi = /** @class */ (function (_super) {
    __extends(StoreCategoriesApi, _super);
    function StoreCategoriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add store category
     * @param {XAdminStoreCategory} xAdminStoreCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreCategoriesApi
     */
    StoreCategoriesApi.prototype.addStoreCategory = function (xAdminStoreCategory, options) {
        var _this = this;
        return exports.StoreCategoriesApiFp(this.configuration).addStoreCategory(xAdminStoreCategory, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete store category
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreCategoriesApi
     */
    StoreCategoriesApi.prototype.deleteStoreCategory = function (id, options) {
        var _this = this;
        return exports.StoreCategoriesApiFp(this.configuration).deleteStoreCategory(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit store category
     * @param {string} id
     * @param {XAdminStoreCategory} xAdminStoreCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreCategoriesApi
     */
    StoreCategoriesApi.prototype.editStoreCategory = function (id, xAdminStoreCategory, options) {
        var _this = this;
        return exports.StoreCategoriesApiFp(this.configuration).editStoreCategory(id, xAdminStoreCategory, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific store category
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreCategoriesApi
     */
    StoreCategoriesApi.prototype.getStoreCategory = function (id, options) {
        var _this = this;
        return exports.StoreCategoriesApiFp(this.configuration).getStoreCategory(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of store categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreCategoriesApi
     */
    StoreCategoriesApi.prototype.listStoreCategories = function (options) {
        var _this = this;
        return exports.StoreCategoriesApiFp(this.configuration).listStoreCategories(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of store categories by Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreCategoriesApi
     */
    StoreCategoriesApi.prototype.listStoreCategoriesByCompany = function (options) {
        var _this = this;
        return exports.StoreCategoriesApiFp(this.configuration).listStoreCategoriesByCompany(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StoreCategoriesApi;
}(base_1.BaseAPI));
exports.StoreCategoriesApi = StoreCategoriesApi;
/**
 * StoreClientsApi - axios parameter creator
 * @export
 */
exports.StoreClientsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add store client
         * @param {XAdminStoreClient} xAdminStoreClient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreClient: function (xAdminStoreClient, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminStoreClient' is not null or undefined
                            common_1.assertParamExists('addStoreClient', 'xAdminStoreClient', xAdminStoreClient);
                            localVarPath = "/api/store/clients";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminStoreClient, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete store client
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreClient: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteStoreClient', 'id', id);
                            localVarPath = "/api/store/clients/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit store client
         * @param {string} id
         * @param {XAdminStoreClient} xAdminStoreClient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoreClient: function (id, xAdminStoreClient, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editStoreClient', 'id', id);
                            // verify required parameter 'xAdminStoreClient' is not null or undefined
                            common_1.assertParamExists('editStoreClient', 'xAdminStoreClient', xAdminStoreClient);
                            localVarPath = "/api/store/clients/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminStoreClient, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get Specific store client
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreClient: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getStoreClient', 'id', id);
                            localVarPath = "/api/store/clients/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreClients: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/store/clients";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store clients by company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreClientsByCompany: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/store/clients/company";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * StoreClientsApi - functional programming interface
 * @export
 */
exports.StoreClientsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.StoreClientsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add store client
         * @param {XAdminStoreClient} xAdminStoreClient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreClient: function (xAdminStoreClient, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addStoreClient(xAdminStoreClient, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete store client
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreClient: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteStoreClient(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit store client
         * @param {string} id
         * @param {XAdminStoreClient} xAdminStoreClient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoreClient: function (id, xAdminStoreClient, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editStoreClient(id, xAdminStoreClient, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get Specific store client
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreClient: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStoreClient(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreClients: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listStoreClients(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store clients by company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreClientsByCompany: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listStoreClientsByCompany(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * StoreClientsApi - factory interface
 * @export
 */
exports.StoreClientsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.StoreClientsApiFp(configuration);
    return {
        /**
         *
         * @summary Add store client
         * @param {XAdminStoreClient} xAdminStoreClient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreClient: function (xAdminStoreClient, options) {
            return localVarFp.addStoreClient(xAdminStoreClient, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete store client
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreClient: function (id, options) {
            return localVarFp.deleteStoreClient(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit store client
         * @param {string} id
         * @param {XAdminStoreClient} xAdminStoreClient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoreClient: function (id, xAdminStoreClient, options) {
            return localVarFp.editStoreClient(id, xAdminStoreClient, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get Specific store client
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreClient: function (id, options) {
            return localVarFp.getStoreClient(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of store clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreClients: function (options) {
            return localVarFp.listStoreClients(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of store clients by company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreClientsByCompany: function (options) {
            return localVarFp.listStoreClientsByCompany(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * StoreClientsApi - object-oriented interface
 * @export
 * @class StoreClientsApi
 * @extends {BaseAPI}
 */
var StoreClientsApi = /** @class */ (function (_super) {
    __extends(StoreClientsApi, _super);
    function StoreClientsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add store client
     * @param {XAdminStoreClient} xAdminStoreClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreClientsApi
     */
    StoreClientsApi.prototype.addStoreClient = function (xAdminStoreClient, options) {
        var _this = this;
        return exports.StoreClientsApiFp(this.configuration).addStoreClient(xAdminStoreClient, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete store client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreClientsApi
     */
    StoreClientsApi.prototype.deleteStoreClient = function (id, options) {
        var _this = this;
        return exports.StoreClientsApiFp(this.configuration).deleteStoreClient(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit store client
     * @param {string} id
     * @param {XAdminStoreClient} xAdminStoreClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreClientsApi
     */
    StoreClientsApi.prototype.editStoreClient = function (id, xAdminStoreClient, options) {
        var _this = this;
        return exports.StoreClientsApiFp(this.configuration).editStoreClient(id, xAdminStoreClient, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get Specific store client
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreClientsApi
     */
    StoreClientsApi.prototype.getStoreClient = function (id, options) {
        var _this = this;
        return exports.StoreClientsApiFp(this.configuration).getStoreClient(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of store clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreClientsApi
     */
    StoreClientsApi.prototype.listStoreClients = function (options) {
        var _this = this;
        return exports.StoreClientsApiFp(this.configuration).listStoreClients(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of store clients by company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreClientsApi
     */
    StoreClientsApi.prototype.listStoreClientsByCompany = function (options) {
        var _this = this;
        return exports.StoreClientsApiFp(this.configuration).listStoreClientsByCompany(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StoreClientsApi;
}(base_1.BaseAPI));
exports.StoreClientsApi = StoreClientsApi;
/**
 * StoreOrdersApi - axios parameter creator
 * @export
 */
exports.StoreOrdersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add store order
         * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreOrder: function (xAdminStoreOrderProduct, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminStoreOrderProduct' is not null or undefined
                            common_1.assertParamExists('addStoreOrder', 'xAdminStoreOrderProduct', xAdminStoreOrderProduct);
                            localVarPath = "/api/store/orders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminStoreOrderProduct, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete store order
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreOrder: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteStoreOrder', 'id', id);
                            localVarPath = "/api/store/orders/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit store order
         * @param {string} id
         * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoreOrder: function (id, xAdminStoreOrderProduct, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editStoreOrder', 'id', id);
                            // verify required parameter 'xAdminStoreOrderProduct' is not null or undefined
                            common_1.assertParamExists('editStoreOrder', 'xAdminStoreOrderProduct', xAdminStoreOrderProduct);
                            localVarPath = "/api/store/orders/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminStoreOrderProduct, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific of store order
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreOrder: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getStoreOrder', 'id', id);
                            localVarPath = "/api/store/orders/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreOrders: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/store/orders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * StoreOrdersApi - functional programming interface
 * @export
 */
exports.StoreOrdersApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.StoreOrdersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add store order
         * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreOrder: function (xAdminStoreOrderProduct, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addStoreOrder(xAdminStoreOrderProduct, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete store order
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreOrder: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteStoreOrder(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit store order
         * @param {string} id
         * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoreOrder: function (id, xAdminStoreOrderProduct, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editStoreOrder(id, xAdminStoreOrderProduct, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific of store order
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreOrder: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStoreOrder(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreOrders: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listStoreOrders(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * StoreOrdersApi - factory interface
 * @export
 */
exports.StoreOrdersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.StoreOrdersApiFp(configuration);
    return {
        /**
         *
         * @summary Add store order
         * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreOrder: function (xAdminStoreOrderProduct, options) {
            return localVarFp.addStoreOrder(xAdminStoreOrderProduct, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete store order
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreOrder: function (id, options) {
            return localVarFp.deleteStoreOrder(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit store order
         * @param {string} id
         * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoreOrder: function (id, xAdminStoreOrderProduct, options) {
            return localVarFp.editStoreOrder(id, xAdminStoreOrderProduct, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific of store order
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreOrder: function (id, options) {
            return localVarFp.getStoreOrder(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of store orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreOrders: function (options) {
            return localVarFp.listStoreOrders(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * StoreOrdersApi - object-oriented interface
 * @export
 * @class StoreOrdersApi
 * @extends {BaseAPI}
 */
var StoreOrdersApi = /** @class */ (function (_super) {
    __extends(StoreOrdersApi, _super);
    function StoreOrdersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add store order
     * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreOrdersApi
     */
    StoreOrdersApi.prototype.addStoreOrder = function (xAdminStoreOrderProduct, options) {
        var _this = this;
        return exports.StoreOrdersApiFp(this.configuration).addStoreOrder(xAdminStoreOrderProduct, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete store order
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreOrdersApi
     */
    StoreOrdersApi.prototype.deleteStoreOrder = function (id, options) {
        var _this = this;
        return exports.StoreOrdersApiFp(this.configuration).deleteStoreOrder(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit store order
     * @param {string} id
     * @param {XAdminStoreOrderProduct} xAdminStoreOrderProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreOrdersApi
     */
    StoreOrdersApi.prototype.editStoreOrder = function (id, xAdminStoreOrderProduct, options) {
        var _this = this;
        return exports.StoreOrdersApiFp(this.configuration).editStoreOrder(id, xAdminStoreOrderProduct, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific of store order
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreOrdersApi
     */
    StoreOrdersApi.prototype.getStoreOrder = function (id, options) {
        var _this = this;
        return exports.StoreOrdersApiFp(this.configuration).getStoreOrder(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of store orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreOrdersApi
     */
    StoreOrdersApi.prototype.listStoreOrders = function (options) {
        var _this = this;
        return exports.StoreOrdersApiFp(this.configuration).listStoreOrders(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StoreOrdersApi;
}(base_1.BaseAPI));
exports.StoreOrdersApi = StoreOrdersApi;
/**
 * StoreProductsApi - axios parameter creator
 * @export
 */
exports.StoreProductsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add store product
         * @param {XAdminStoreProduct} xAdminStoreProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreProduct: function (xAdminStoreProduct, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminStoreProduct' is not null or undefined
                            common_1.assertParamExists('addStoreProduct', 'xAdminStoreProduct', xAdminStoreProduct);
                            localVarPath = "/api/store/products";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminStoreProduct, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete store product
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreProduct: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteStoreProduct', 'id', id);
                            localVarPath = "/api/store/products/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit store product
         * @param {string} id
         * @param {XAdminStoreProduct} xAdminStoreProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoreProduct: function (id, xAdminStoreProduct, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editStoreProduct', 'id', id);
                            // verify required parameter 'xAdminStoreProduct' is not null or undefined
                            common_1.assertParamExists('editStoreProduct', 'xAdminStoreProduct', xAdminStoreProduct);
                            localVarPath = "/api/store/products/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminStoreProduct, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific store product
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreProduct: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getStoreProduct', 'id', id);
                            localVarPath = "/api/store/products/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreProducts: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/store/products";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store products by Company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreProductsByCompany: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/store/products/company";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * StoreProductsApi - functional programming interface
 * @export
 */
exports.StoreProductsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.StoreProductsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add store product
         * @param {XAdminStoreProduct} xAdminStoreProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreProduct: function (xAdminStoreProduct, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addStoreProduct(xAdminStoreProduct, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete store product
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreProduct: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteStoreProduct(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit store product
         * @param {string} id
         * @param {XAdminStoreProduct} xAdminStoreProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoreProduct: function (id, xAdminStoreProduct, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editStoreProduct(id, xAdminStoreProduct, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific store product
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreProduct: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStoreProduct(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreProducts: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listStoreProducts(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of store products by Company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreProductsByCompany: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listStoreProductsByCompany(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * StoreProductsApi - factory interface
 * @export
 */
exports.StoreProductsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.StoreProductsApiFp(configuration);
    return {
        /**
         *
         * @summary Add store product
         * @param {XAdminStoreProduct} xAdminStoreProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreProduct: function (xAdminStoreProduct, options) {
            return localVarFp.addStoreProduct(xAdminStoreProduct, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete store product
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreProduct: function (id, options) {
            return localVarFp.deleteStoreProduct(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit store product
         * @param {string} id
         * @param {XAdminStoreProduct} xAdminStoreProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoreProduct: function (id, xAdminStoreProduct, options) {
            return localVarFp.editStoreProduct(id, xAdminStoreProduct, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific store product
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreProduct: function (id, options) {
            return localVarFp.getStoreProduct(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of store products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreProducts: function (options) {
            return localVarFp.listStoreProducts(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of store products by Company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreProductsByCompany: function (options) {
            return localVarFp.listStoreProductsByCompany(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * StoreProductsApi - object-oriented interface
 * @export
 * @class StoreProductsApi
 * @extends {BaseAPI}
 */
var StoreProductsApi = /** @class */ (function (_super) {
    __extends(StoreProductsApi, _super);
    function StoreProductsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add store product
     * @param {XAdminStoreProduct} xAdminStoreProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreProductsApi
     */
    StoreProductsApi.prototype.addStoreProduct = function (xAdminStoreProduct, options) {
        var _this = this;
        return exports.StoreProductsApiFp(this.configuration).addStoreProduct(xAdminStoreProduct, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete store product
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreProductsApi
     */
    StoreProductsApi.prototype.deleteStoreProduct = function (id, options) {
        var _this = this;
        return exports.StoreProductsApiFp(this.configuration).deleteStoreProduct(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit store product
     * @param {string} id
     * @param {XAdminStoreProduct} xAdminStoreProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreProductsApi
     */
    StoreProductsApi.prototype.editStoreProduct = function (id, xAdminStoreProduct, options) {
        var _this = this;
        return exports.StoreProductsApiFp(this.configuration).editStoreProduct(id, xAdminStoreProduct, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific store product
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreProductsApi
     */
    StoreProductsApi.prototype.getStoreProduct = function (id, options) {
        var _this = this;
        return exports.StoreProductsApiFp(this.configuration).getStoreProduct(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of store products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreProductsApi
     */
    StoreProductsApi.prototype.listStoreProducts = function (options) {
        var _this = this;
        return exports.StoreProductsApiFp(this.configuration).listStoreProducts(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of store products by Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreProductsApi
     */
    StoreProductsApi.prototype.listStoreProductsByCompany = function (options) {
        var _this = this;
        return exports.StoreProductsApiFp(this.configuration).listStoreProductsByCompany(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StoreProductsApi;
}(base_1.BaseAPI));
exports.StoreProductsApi = StoreProductsApi;
/**
 * StorePurchasesApi - axios parameter creator
 * @export
 */
exports.StorePurchasesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add store purchase
         * @param {XAdminStorePurchaseInput} xAdminStorePurchaseInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStorePurchase: function (xAdminStorePurchaseInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminStorePurchaseInput' is not null or undefined
                            common_1.assertParamExists('addStorePurchase', 'xAdminStorePurchaseInput', xAdminStorePurchaseInput);
                            localVarPath = "/api/store/purchases";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminStorePurchaseInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * StorePurchasesApi - functional programming interface
 * @export
 */
exports.StorePurchasesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.StorePurchasesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add store purchase
         * @param {XAdminStorePurchaseInput} xAdminStorePurchaseInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStorePurchase: function (xAdminStorePurchaseInput, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addStorePurchase(xAdminStorePurchaseInput, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * StorePurchasesApi - factory interface
 * @export
 */
exports.StorePurchasesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.StorePurchasesApiFp(configuration);
    return {
        /**
         *
         * @summary Add store purchase
         * @param {XAdminStorePurchaseInput} xAdminStorePurchaseInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStorePurchase: function (xAdminStorePurchaseInput, options) {
            return localVarFp.addStorePurchase(xAdminStorePurchaseInput, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * StorePurchasesApi - object-oriented interface
 * @export
 * @class StorePurchasesApi
 * @extends {BaseAPI}
 */
var StorePurchasesApi = /** @class */ (function (_super) {
    __extends(StorePurchasesApi, _super);
    function StorePurchasesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add store purchase
     * @param {XAdminStorePurchaseInput} xAdminStorePurchaseInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorePurchasesApi
     */
    StorePurchasesApi.prototype.addStorePurchase = function (xAdminStorePurchaseInput, options) {
        var _this = this;
        return exports.StorePurchasesApiFp(this.configuration).addStorePurchase(xAdminStorePurchaseInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StorePurchasesApi;
}(base_1.BaseAPI));
exports.StorePurchasesApi = StorePurchasesApi;
/**
 * TranslationsApi - axios parameter creator
 * @export
 */
exports.TranslationsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add translation
         * @param {XAdminTranslation} xAdminTranslation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTranslation: function (xAdminTranslation, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminTranslation' is not null or undefined
                            common_1.assertParamExists('addTranslation', 'xAdminTranslation', xAdminTranslation);
                            localVarPath = "/api/translations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminTranslation, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete translation
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTranslation: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteTranslation', 'id', id);
                            localVarPath = "/api/translations/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit translation
         * @param {string} id
         * @param {XAdminTranslation} xAdminTranslation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTranslation: function (id, xAdminTranslation, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editTranslation', 'id', id);
                            // verify required parameter 'xAdminTranslation' is not null or undefined
                            common_1.assertParamExists('editTranslation', 'xAdminTranslation', xAdminTranslation);
                            localVarPath = "/api/translations/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminTranslation, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific translation
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTranslation: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getTranslation', 'id', id);
                            localVarPath = "/api/translations/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of translations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTranslations: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/translations";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * TranslationsApi - functional programming interface
 * @export
 */
exports.TranslationsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.TranslationsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add translation
         * @param {XAdminTranslation} xAdminTranslation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTranslation: function (xAdminTranslation, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addTranslation(xAdminTranslation, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete translation
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTranslation: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteTranslation(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit translation
         * @param {string} id
         * @param {XAdminTranslation} xAdminTranslation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTranslation: function (id, xAdminTranslation, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editTranslation(id, xAdminTranslation, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific translation
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTranslation: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTranslation(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of translations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTranslations: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listTranslations(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * TranslationsApi - factory interface
 * @export
 */
exports.TranslationsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.TranslationsApiFp(configuration);
    return {
        /**
         *
         * @summary Add translation
         * @param {XAdminTranslation} xAdminTranslation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTranslation: function (xAdminTranslation, options) {
            return localVarFp.addTranslation(xAdminTranslation, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete translation
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTranslation: function (id, options) {
            return localVarFp.deleteTranslation(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit translation
         * @param {string} id
         * @param {XAdminTranslation} xAdminTranslation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTranslation: function (id, xAdminTranslation, options) {
            return localVarFp.editTranslation(id, xAdminTranslation, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific translation
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTranslation: function (id, options) {
            return localVarFp.getTranslation(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of translations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTranslations: function (options) {
            return localVarFp.listTranslations(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * TranslationsApi - object-oriented interface
 * @export
 * @class TranslationsApi
 * @extends {BaseAPI}
 */
var TranslationsApi = /** @class */ (function (_super) {
    __extends(TranslationsApi, _super);
    function TranslationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add translation
     * @param {XAdminTranslation} xAdminTranslation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    TranslationsApi.prototype.addTranslation = function (xAdminTranslation, options) {
        var _this = this;
        return exports.TranslationsApiFp(this.configuration).addTranslation(xAdminTranslation, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete translation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    TranslationsApi.prototype.deleteTranslation = function (id, options) {
        var _this = this;
        return exports.TranslationsApiFp(this.configuration).deleteTranslation(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit translation
     * @param {string} id
     * @param {XAdminTranslation} xAdminTranslation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    TranslationsApi.prototype.editTranslation = function (id, xAdminTranslation, options) {
        var _this = this;
        return exports.TranslationsApiFp(this.configuration).editTranslation(id, xAdminTranslation, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific translation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    TranslationsApi.prototype.getTranslation = function (id, options) {
        var _this = this;
        return exports.TranslationsApiFp(this.configuration).getTranslation(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of translations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    TranslationsApi.prototype.listTranslations = function (options) {
        var _this = this;
        return exports.TranslationsApiFp(this.configuration).listTranslations(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TranslationsApi;
}(base_1.BaseAPI));
exports.TranslationsApi = TranslationsApi;
/**
 * TypesApi - axios parameter creator
 * @export
 */
exports.TypesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add type
         * @param {XAdminType} xAdminType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addType: function (xAdminType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminType' is not null or undefined
                            common_1.assertParamExists('addType', 'xAdminType', xAdminType);
                            localVarPath = "/api/types";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminType, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteType: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteType', 'id', id);
                            localVarPath = "/api/types/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit type
         * @param {string} id
         * @param {XAdminType} xAdminType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editType: function (id, xAdminType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editType', 'id', id);
                            // verify required parameter 'xAdminType' is not null or undefined
                            common_1.assertParamExists('editType', 'xAdminType', xAdminType);
                            localVarPath = "/api/types/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminType, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getType: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getType', 'id', id);
                            localVarPath = "/api/types/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypes: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/types";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * TypesApi - functional programming interface
 * @export
 */
exports.TypesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.TypesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add type
         * @param {XAdminType} xAdminType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addType: function (xAdminType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addType(xAdminType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteType: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteType(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit type
         * @param {string} id
         * @param {XAdminType} xAdminType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editType: function (id, xAdminType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editType(id, xAdminType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getType: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getType(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypes: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listTypes(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * TypesApi - factory interface
 * @export
 */
exports.TypesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.TypesApiFp(configuration);
    return {
        /**
         *
         * @summary Add type
         * @param {XAdminType} xAdminType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addType: function (xAdminType, options) {
            return localVarFp.addType(xAdminType, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteType: function (id, options) {
            return localVarFp.deleteType(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit type
         * @param {string} id
         * @param {XAdminType} xAdminType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editType: function (id, xAdminType, options) {
            return localVarFp.editType(id, xAdminType, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getType: function (id, options) {
            return localVarFp.getType(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypes: function (options) {
            return localVarFp.listTypes(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * TypesApi - object-oriented interface
 * @export
 * @class TypesApi
 * @extends {BaseAPI}
 */
var TypesApi = /** @class */ (function (_super) {
    __extends(TypesApi, _super);
    function TypesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add type
     * @param {XAdminType} xAdminType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypesApi
     */
    TypesApi.prototype.addType = function (xAdminType, options) {
        var _this = this;
        return exports.TypesApiFp(this.configuration).addType(xAdminType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypesApi
     */
    TypesApi.prototype.deleteType = function (id, options) {
        var _this = this;
        return exports.TypesApiFp(this.configuration).deleteType(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit type
     * @param {string} id
     * @param {XAdminType} xAdminType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypesApi
     */
    TypesApi.prototype.editType = function (id, xAdminType, options) {
        var _this = this;
        return exports.TypesApiFp(this.configuration).editType(id, xAdminType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypesApi
     */
    TypesApi.prototype.getType = function (id, options) {
        var _this = this;
        return exports.TypesApiFp(this.configuration).getType(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypesApi
     */
    TypesApi.prototype.listTypes = function (options) {
        var _this = this;
        return exports.TypesApiFp(this.configuration).listTypes(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TypesApi;
}(base_1.BaseAPI));
exports.TypesApi = TypesApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
exports.UsersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add user
         * @param {XAdminUser} xAdminUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: function (xAdminUser, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminUser' is not null or undefined
                            common_1.assertParamExists('addUser', 'xAdminUser', xAdminUser);
                            localVarPath = "/api/users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminUser, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteUser', 'id', id);
                            localVarPath = "/api/users/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit user
         * @param {string} id
         * @param {XAdminUser} xAdminUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUser: function (id, xAdminUser, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editUser', 'id', id);
                            // verify required parameter 'xAdminUser' is not null or undefined
                            common_1.assertParamExists('editUser', 'xAdminUser', xAdminUser);
                            localVarPath = "/api/users/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminUser, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getUser', 'id', id);
                            localVarPath = "/api/users/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
exports.UsersApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.UsersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add user
         * @param {XAdminUser} xAdminUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: function (xAdminUser, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addUser(xAdminUser, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUser(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit user
         * @param {string} id
         * @param {XAdminUser} xAdminUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUser: function (id, xAdminUser, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editUser(id, xAdminUser, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUser(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listUsers(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
exports.UsersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.UsersApiFp(configuration);
    return {
        /**
         *
         * @summary Add user
         * @param {XAdminUser} xAdminUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: function (xAdminUser, options) {
            return localVarFp.addUser(xAdminUser, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (id, options) {
            return localVarFp.deleteUser(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit user
         * @param {string} id
         * @param {XAdminUser} xAdminUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUser: function (id, xAdminUser, options) {
            return localVarFp.editUser(id, xAdminUser, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (id, options) {
            return localVarFp.getUser(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (options) {
            return localVarFp.listUsers(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
var UsersApi = /** @class */ (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add user
     * @param {XAdminUser} xAdminUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.addUser = function (xAdminUser, options) {
        var _this = this;
        return exports.UsersApiFp(this.configuration).addUser(xAdminUser, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.deleteUser = function (id, options) {
        var _this = this;
        return exports.UsersApiFp(this.configuration).deleteUser(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit user
     * @param {string} id
     * @param {XAdminUser} xAdminUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.editUser = function (id, xAdminUser, options) {
        var _this = this;
        return exports.UsersApiFp(this.configuration).editUser(id, xAdminUser, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getUser = function (id, options) {
        var _this = this;
        return exports.UsersApiFp(this.configuration).getUser(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.listUsers = function (options) {
        var _this = this;
        return exports.UsersApiFp(this.configuration).listUsers(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UsersApi;
}(base_1.BaseAPI));
exports.UsersApi = UsersApi;
/**
 * UsersCompaniesApi - axios parameter creator
 * @export
 */
exports.UsersCompaniesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add user company
         * @param {XAdminUserCompany} xAdminUserCompany
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserCompany: function (xAdminUserCompany, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminUserCompany' is not null or undefined
                            common_1.assertParamExists('addUserCompany', 'xAdminUserCompany', xAdminUserCompany);
                            localVarPath = "/api/users-companies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminUserCompany, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete user company
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserCompany: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteUserCompany', 'id', id);
                            localVarPath = "/api/users-companies/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit user company
         * @param {string} id
         * @param {XAdminUserCompany} xAdminUserCompany
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserCompany: function (id, xAdminUserCompany, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editUserCompany', 'id', id);
                            // verify required parameter 'xAdminUserCompany' is not null or undefined
                            common_1.assertParamExists('editUserCompany', 'xAdminUserCompany', xAdminUserCompany);
                            localVarPath = "/api/users-companies/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminUserCompany, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific user company
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCompany: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getUserCompany', 'id', id);
                            localVarPath = "/api/users-companies/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of user companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserCompanies: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/users-companies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * UsersCompaniesApi - functional programming interface
 * @export
 */
exports.UsersCompaniesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.UsersCompaniesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add user company
         * @param {XAdminUserCompany} xAdminUserCompany
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserCompany: function (xAdminUserCompany, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addUserCompany(xAdminUserCompany, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete user company
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserCompany: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUserCompany(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit user company
         * @param {string} id
         * @param {XAdminUserCompany} xAdminUserCompany
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserCompany: function (id, xAdminUserCompany, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editUserCompany(id, xAdminUserCompany, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific user company
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCompany: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserCompany(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of user companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserCompanies: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listUserCompanies(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * UsersCompaniesApi - factory interface
 * @export
 */
exports.UsersCompaniesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.UsersCompaniesApiFp(configuration);
    return {
        /**
         *
         * @summary Add user company
         * @param {XAdminUserCompany} xAdminUserCompany
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserCompany: function (xAdminUserCompany, options) {
            return localVarFp.addUserCompany(xAdminUserCompany, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete user company
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserCompany: function (id, options) {
            return localVarFp.deleteUserCompany(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit user company
         * @param {string} id
         * @param {XAdminUserCompany} xAdminUserCompany
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserCompany: function (id, xAdminUserCompany, options) {
            return localVarFp.editUserCompany(id, xAdminUserCompany, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific user company
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCompany: function (id, options) {
            return localVarFp.getUserCompany(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of user companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserCompanies: function (options) {
            return localVarFp.listUserCompanies(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * UsersCompaniesApi - object-oriented interface
 * @export
 * @class UsersCompaniesApi
 * @extends {BaseAPI}
 */
var UsersCompaniesApi = /** @class */ (function (_super) {
    __extends(UsersCompaniesApi, _super);
    function UsersCompaniesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add user company
     * @param {XAdminUserCompany} xAdminUserCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCompaniesApi
     */
    UsersCompaniesApi.prototype.addUserCompany = function (xAdminUserCompany, options) {
        var _this = this;
        return exports.UsersCompaniesApiFp(this.configuration).addUserCompany(xAdminUserCompany, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete user company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCompaniesApi
     */
    UsersCompaniesApi.prototype.deleteUserCompany = function (id, options) {
        var _this = this;
        return exports.UsersCompaniesApiFp(this.configuration).deleteUserCompany(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit user company
     * @param {string} id
     * @param {XAdminUserCompany} xAdminUserCompany
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCompaniesApi
     */
    UsersCompaniesApi.prototype.editUserCompany = function (id, xAdminUserCompany, options) {
        var _this = this;
        return exports.UsersCompaniesApiFp(this.configuration).editUserCompany(id, xAdminUserCompany, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific user company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCompaniesApi
     */
    UsersCompaniesApi.prototype.getUserCompany = function (id, options) {
        var _this = this;
        return exports.UsersCompaniesApiFp(this.configuration).getUserCompany(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of user companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCompaniesApi
     */
    UsersCompaniesApi.prototype.listUserCompanies = function (options) {
        var _this = this;
        return exports.UsersCompaniesApiFp(this.configuration).listUserCompanies(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UsersCompaniesApi;
}(base_1.BaseAPI));
exports.UsersCompaniesApi = UsersCompaniesApi;
/**
 * UsersDataQuizGameApi - axios parameter creator
 * @export
 */
exports.UsersDataQuizGameApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add user data quiz game
         * @param {XAdminQuizUserData} xAdminQuizUserData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserDataQuiz: function (xAdminQuizUserData, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminQuizUserData' is not null or undefined
                            common_1.assertParamExists('addUserDataQuiz', 'xAdminQuizUserData', xAdminQuizUserData);
                            localVarPath = "/api/quiz-game/users-data";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminQuizUserData, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete user data quiz game
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserDataQuiz: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteUserDataQuiz', 'id', id);
                            localVarPath = "/api/quiz-game/users-data/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit user data quiz game
         * @param {string} id
         * @param {XAdminQuizUserData} xAdminQuizUserData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserDataQuiz: function (id, xAdminQuizUserData, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editUserDataQuiz', 'id', id);
                            // verify required parameter 'xAdminQuizUserData' is not null or undefined
                            common_1.assertParamExists('editUserDataQuiz', 'xAdminQuizUserData', xAdminQuizUserData);
                            localVarPath = "/api/quiz-game/users-data/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminQuizUserData, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific user data quiz game
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizUserData: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getQuizUserData', 'id', id);
                            localVarPath = "/api/quiz-game/users-data/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of users data quiz game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizUserData: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/quiz-game/users-data";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * UsersDataQuizGameApi - functional programming interface
 * @export
 */
exports.UsersDataQuizGameApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.UsersDataQuizGameApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add user data quiz game
         * @param {XAdminQuizUserData} xAdminQuizUserData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserDataQuiz: function (xAdminQuizUserData, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addUserDataQuiz(xAdminQuizUserData, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete user data quiz game
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserDataQuiz: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUserDataQuiz(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit user data quiz game
         * @param {string} id
         * @param {XAdminQuizUserData} xAdminQuizUserData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserDataQuiz: function (id, xAdminQuizUserData, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editUserDataQuiz(id, xAdminQuizUserData, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific user data quiz game
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizUserData: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getQuizUserData(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of users data quiz game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizUserData: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listQuizUserData(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * UsersDataQuizGameApi - factory interface
 * @export
 */
exports.UsersDataQuizGameApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.UsersDataQuizGameApiFp(configuration);
    return {
        /**
         *
         * @summary Add user data quiz game
         * @param {XAdminQuizUserData} xAdminQuizUserData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserDataQuiz: function (xAdminQuizUserData, options) {
            return localVarFp.addUserDataQuiz(xAdminQuizUserData, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete user data quiz game
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserDataQuiz: function (id, options) {
            return localVarFp.deleteUserDataQuiz(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit user data quiz game
         * @param {string} id
         * @param {XAdminQuizUserData} xAdminQuizUserData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserDataQuiz: function (id, xAdminQuizUserData, options) {
            return localVarFp.editUserDataQuiz(id, xAdminQuizUserData, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific user data quiz game
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizUserData: function (id, options) {
            return localVarFp.getQuizUserData(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of users data quiz game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuizUserData: function (options) {
            return localVarFp.listQuizUserData(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * UsersDataQuizGameApi - object-oriented interface
 * @export
 * @class UsersDataQuizGameApi
 * @extends {BaseAPI}
 */
var UsersDataQuizGameApi = /** @class */ (function (_super) {
    __extends(UsersDataQuizGameApi, _super);
    function UsersDataQuizGameApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add user data quiz game
     * @param {XAdminQuizUserData} xAdminQuizUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDataQuizGameApi
     */
    UsersDataQuizGameApi.prototype.addUserDataQuiz = function (xAdminQuizUserData, options) {
        var _this = this;
        return exports.UsersDataQuizGameApiFp(this.configuration).addUserDataQuiz(xAdminQuizUserData, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete user data quiz game
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDataQuizGameApi
     */
    UsersDataQuizGameApi.prototype.deleteUserDataQuiz = function (id, options) {
        var _this = this;
        return exports.UsersDataQuizGameApiFp(this.configuration).deleteUserDataQuiz(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit user data quiz game
     * @param {string} id
     * @param {XAdminQuizUserData} xAdminQuizUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDataQuizGameApi
     */
    UsersDataQuizGameApi.prototype.editUserDataQuiz = function (id, xAdminQuizUserData, options) {
        var _this = this;
        return exports.UsersDataQuizGameApiFp(this.configuration).editUserDataQuiz(id, xAdminQuizUserData, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific user data quiz game
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDataQuizGameApi
     */
    UsersDataQuizGameApi.prototype.getQuizUserData = function (id, options) {
        var _this = this;
        return exports.UsersDataQuizGameApiFp(this.configuration).getQuizUserData(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of users data quiz game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDataQuizGameApi
     */
    UsersDataQuizGameApi.prototype.listQuizUserData = function (options) {
        var _this = this;
        return exports.UsersDataQuizGameApiFp(this.configuration).listQuizUserData(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UsersDataQuizGameApi;
}(base_1.BaseAPI));
exports.UsersDataQuizGameApi = UsersDataQuizGameApi;
/**
 * UsersPermissionsApi - axios parameter creator
 * @export
 */
exports.UsersPermissionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add user permission
         * @param {XAdminUserPermission} xAdminUserPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserPermission: function (xAdminUserPermission, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xAdminUserPermission' is not null or undefined
                            common_1.assertParamExists('addUserPermission', 'xAdminUserPermission', xAdminUserPermission);
                            localVarPath = "/api/users-permissions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminUserPermission, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete user permission
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPermission: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('deleteUserPermission', 'id', id);
                            localVarPath = "/api/users-permissions/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit user permission
         * @param {string} id
         * @param {XAdminUserPermission} xAdminUserPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserPermission: function (id, xAdminUserPermission, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('editUserPermission', 'id', id);
                            // verify required parameter 'xAdminUserPermission' is not null or undefined
                            common_1.assertParamExists('editUserPermission', 'xAdminUserPermission', xAdminUserPermission);
                            localVarPath = "/api/users-permissions/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(xAdminUserPermission, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific user permission
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermission: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            common_1.assertParamExists('getUserPermission', 'id', id);
                            localVarPath = "/api/users-permissions/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List of user permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPermissions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/users-permissions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearer required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearer required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * UsersPermissionsApi - functional programming interface
 * @export
 */
exports.UsersPermissionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.UsersPermissionsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add user permission
         * @param {XAdminUserPermission} xAdminUserPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserPermission: function (xAdminUserPermission, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addUserPermission(xAdminUserPermission, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete user permission
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPermission: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUserPermission(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit user permission
         * @param {string} id
         * @param {XAdminUserPermission} xAdminUserPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserPermission: function (id, xAdminUserPermission, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.editUserPermission(id, xAdminUserPermission, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific user permission
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermission: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserPermission(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List of user permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPermissions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listUserPermissions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * UsersPermissionsApi - factory interface
 * @export
 */
exports.UsersPermissionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.UsersPermissionsApiFp(configuration);
    return {
        /**
         *
         * @summary Add user permission
         * @param {XAdminUserPermission} xAdminUserPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserPermission: function (xAdminUserPermission, options) {
            return localVarFp.addUserPermission(xAdminUserPermission, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete user permission
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPermission: function (id, options) {
            return localVarFp.deleteUserPermission(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit user permission
         * @param {string} id
         * @param {XAdminUserPermission} xAdminUserPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserPermission: function (id, xAdminUserPermission, options) {
            return localVarFp.editUserPermission(id, xAdminUserPermission, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific user permission
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermission: function (id, options) {
            return localVarFp.getUserPermission(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List of user permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPermissions: function (options) {
            return localVarFp.listUserPermissions(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * UsersPermissionsApi - object-oriented interface
 * @export
 * @class UsersPermissionsApi
 * @extends {BaseAPI}
 */
var UsersPermissionsApi = /** @class */ (function (_super) {
    __extends(UsersPermissionsApi, _super);
    function UsersPermissionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add user permission
     * @param {XAdminUserPermission} xAdminUserPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsApi
     */
    UsersPermissionsApi.prototype.addUserPermission = function (xAdminUserPermission, options) {
        var _this = this;
        return exports.UsersPermissionsApiFp(this.configuration).addUserPermission(xAdminUserPermission, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete user permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsApi
     */
    UsersPermissionsApi.prototype.deleteUserPermission = function (id, options) {
        var _this = this;
        return exports.UsersPermissionsApiFp(this.configuration).deleteUserPermission(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit user permission
     * @param {string} id
     * @param {XAdminUserPermission} xAdminUserPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsApi
     */
    UsersPermissionsApi.prototype.editUserPermission = function (id, xAdminUserPermission, options) {
        var _this = this;
        return exports.UsersPermissionsApiFp(this.configuration).editUserPermission(id, xAdminUserPermission, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific user permission
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsApi
     */
    UsersPermissionsApi.prototype.getUserPermission = function (id, options) {
        var _this = this;
        return exports.UsersPermissionsApiFp(this.configuration).getUserPermission(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List of user permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsApi
     */
    UsersPermissionsApi.prototype.listUserPermissions = function (options) {
        var _this = this;
        return exports.UsersPermissionsApiFp(this.configuration).listUserPermissions(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UsersPermissionsApi;
}(base_1.BaseAPI));
exports.UsersPermissionsApi = UsersPermissionsApi;
